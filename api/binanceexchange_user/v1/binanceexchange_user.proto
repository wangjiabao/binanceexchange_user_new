syntax = "proto3";

import "google/api/annotations.proto";

option go_package = "binanceexchange_user/api/binanceexchange_user/v1;v1";
option java_multiple_files = true;
option java_package = "api.binancedata.v1";

service BinanceUser {
  rpc GetUser (GetUserRequest) returns (GetUserReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/get_user"
    };
  };

  rpc PullUserDeposit (PullUserDepositRequest) returns (PullUserDepositReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/pull_user_deposit"
    };
  };

  rpc PullUserDeposit2 (PullUserDepositRequest) returns (PullUserDepositReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/pull_user_deposit_2"
    };
  };

  rpc PullUserCredentialsBsc (PullUserCredentialsBscRequest) returns (PullUserCredentialsBscReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/pull_user_credentials_bsc"
    };
  };

  rpc BindTrader (BindTraderRequest) returns (BindTraderReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/bind_trader"
    };
  };

  rpc ListenTraderAndUserOrder (ListenTraderAndUserOrderRequest) returns (ListenTraderAndUserOrderReply) {
    option (google.api.http) = {
      post: "/api/binanceexchange_user/listen_trader_and_user_order"
      body: "*"
    };
  };

  rpc ListenTraderAndUserOrderNew (ListenTraderAndUserOrderRequest) returns (ListenTraderAndUserOrderReply) {
    option (google.api.http) = {
      post: "/api/binanceexchange_user/listen_trader_and_user_order_new"
      body: "*"
    };
  };

  rpc ListenOrderNew (ListenTraderAndUserOrderRequest) returns (ListenTraderAndUserOrderReply) {
    option (google.api.http) = {
      post: "/api/binanceexchange_user/listen_trader_and_user_order_last"
      body: "*"
    };
  };

  rpc OrderHandle (OrderHandleRequest) returns (OrderHandleReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/order_handle"
    };
  };

  rpc OrderHandleTwo (OrderHandleRequest) returns (OrderHandleReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/order_handle_two"
    };
  };

  rpc Analyze (AnalyzeRequest) returns (AnalyzeReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/analyze"
    };
  };

  rpc CloseOrderAfterBind (CloseOrderAfterBindRequest) returns (CloseOrderAfterBindReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/close_order_after_bind"
    };
  };

  rpc CloseOrderAfterBindTwo (CloseOrderAfterBindRequest) returns (CloseOrderAfterBindReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/close_order_after_bind_tfi"
    };
  };

  rpc InitOrderAfterBind (InitOrderAfterBindRequest) returns (InitOrderAfterBindReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/init_order_after_bind"
    };
  };

  rpc InitOrderAfterBindTwo (InitOrderAfterBindRequest) returns (InitOrderAfterBindReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/init_order_after_bind_tfi"
    };
  };

  rpc InitOrderAfterBindTwoNew (InitOrderAfterBindRequest) returns (InitOrderAfterBindReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/init_order_after_bind_tfi_new"
    };
  };

  rpc HandleChange (OverOrderAfterBindRequest) returns (OverOrderAfterBindReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/handle_change"
    };
  };

  rpc OverOrderAfterBind (OverOrderAfterBindRequest) returns (OverOrderAfterBindReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/over_order_after_bind"
    };
  };

  rpc OverOrderAfterBindTwo (OverOrderAfterBindRequest) returns (OverOrderAfterBindReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/over_order_after_bind_tfi"
    };
  };

  rpc AdminOverOrderAfterBind (OverOrderAfterBindRequest) returns (OverOrderAfterBindReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/admin_over_order_after_bind"
    };
  };

  rpc AdminOverOrderAfterBindTwo (OverOrderAfterBindRequest) returns (OverOrderAfterBindReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/admin_over_order_after_bind_tfi"
    };
  };

  rpc AdminOverOrderTwoByInfo (AdminOverOrderTwoByInfoRequest) returns (AdminOverOrderTwoByInfoReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/admin_over_order_two_by_info"
    };
  };

  rpc OrderAdminTwo (OrderAdminTwoRequest) returns (OrderAdminTwoReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/order_admin_two"
    };
  };

  rpc ExchangeUserLeverAge (ExchangeUserLeverAgeRequest) returns (ExchangeUserLeverAgeReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/exchange_user_lever_age"
    };
  };

  rpc PullTradingBoxOpen (PullTradingBoxOpenRequest) returns (PullTradingBoxOpenReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/pull_trading_box_open"
    };
  };

  rpc SettleTradingBoxOpen (SettleTradingBoxOpenRequest) returns (SettleTradingBoxOpenReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/settle_trading_box_open"
    };
  };

  rpc PullBinanceTradeHistory (PullBinanceTradeHistoryRequest) returns (PullBinanceTradeHistoryReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/pull_binance_trade_history"
    };
  };

  rpc GetBinanceTraderPosition (GetBinanceTraderPositionHistoryRequest) returns (GetBinanceTraderPositionHistoryReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/get_binance_trader_position_history"
    };
  };

  rpc UserOrderDo (UserOrderDoRequest) returns (UserOrderDoReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/user_order_do"
    };
  };

  rpc UserOrderDoTwo (UserOrderDoRequest) returns (UserOrderDoReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/user_order_do_two"
    };
  };

  rpc UserOrderDoHandlePrice (UserOrderDoHandlePriceRequest) returns (UserOrderDoHandlePriceReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/user_order_do_handel_price"
    };
  };

  rpc PullFilData (PullFilDataRequest) returns (PullFilDataReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/pull_fil_data"
    };
  };

  rpc GetFilData (GetFilDataRequest) returns (GetFilDataReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/get_fil_data"
    };
  };

  rpc GetUserBindData (GetUserBindDataRequest) returns (GetUserBindDataReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/get_user_bind_data"
    };
  };

  rpc GetBinanceTradersTrade (GetBinanceTradersTradeRequest) returns (GetBinanceTradersTradeReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/get_binance_traders_trader"
    };
  };

  rpc InsertUserBindData (InsertUserBindDataRequest) returns (InsertUserBindDataReply) {
    option (google.api.http) = {
      post: "/api/binanceexchange_user/insert_user_bind_data"
      body: "send_body"
    };
  };

  rpc DeleteUserBindData (DeleteUserBindDataRequest) returns (DeleteUserBindDataReply) {
    option (google.api.http) = {
      post: "/api/binanceexchange_user/delete_user_bind_data"
      body: "send_body"
    };
  };

  rpc HandleP (HandlePRequest) returns (HandlePReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/handle_p"
    };
  };

  rpc GetUserAndTrader (GetUserAndTraderRequest) returns (GetUserAndTraderReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/get_user_and_trader"
    };
  };

  rpc GetTraderPosition (GetTraderPositionRequest) returns (GetTraderPositionReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/get_trader_positions"
    };
  };

  rpc GetUserPosition (GetUserPositionRequest) returns (GetUserPositionReply) {
    option (google.api.http) = {
      get: "/api/binanceexchange_user/get_user_positions"
    };
  };

  rpc OpenPosition (OpenPositionRequest) returns (OpenPositionReply) {
    option (google.api.http) = {
      post: "/api/binanceexchange_user/open_positions"
      body: "send_body"
    };
  };

  rpc InitPosition (InitPositionRequest) returns (InitPositionReply) {
    option (google.api.http) = {
      post: "/api/binanceexchange_user/init_positions"
      body: "send_body"
    };
  };

  rpc UnbindAndClosePosition (UnbindAndClosePositionRequest) returns (UnbindAndClosePositionReply) {
    option (google.api.http) = {
      post: "/api/binanceexchange_user/unbind_and_close_positions"
      body: "send_body"
    };
  };
}

message GetUserRequest {
  string address = 1;
}

message GetUserReply {
  int64 play = 4;
  int64 status = 1;
  int64 amount = 2;
  string balance = 3;
  string balanceTfi = 5;
  int64 amountTfi = 6;
}

message PullUserDepositRequest {}

message PullUserDepositReply {}

message PullUserCredentialsBscRequest {}

message PullUserCredentialsBscReply {}

message BindTraderRequest {}

message BindTraderReply {}

message AnalyzeRequest {}

message AnalyzeReply {}

message CloseOrderAfterBindRequest {}

message CloseOrderAfterBindReply {}

message InitOrderAfterBindRequest {}

message InitOrderAfterBindReply {}

message OverOrderAfterBindRequest {}

message OverOrderAfterBindReply {}

message AdminOverOrderTwoByInfoRequest {
  string apiKey = 1;
  string apiSecret = 2;
  string symbol = 3;
  double num = 4;
  string positionSide = 5;
}

message AdminOverOrderTwoByInfoReply {}

message OrderAdminTwoRequest {
  uint64 user_id = 1;
  uint64 trader_id = 2;
  string symbol = 3;
}

message OrderAdminTwoReply {}

message ExchangeUserLeverAgeRequest {
  uint64 user_id = 1;
  string symbol = 3;
  uint64 num = 2;
}

message ExchangeUserLeverAgeReply {}

message OrderHandleRequest {}

message OrderHandleReply {}

message ListenTraderAndUserOrderRequest {
  message SendBody {
    repeated Order orders = 1;
    string last = 2;
    uint64 init_order = 4;
    message Order {
      uint64 uid = 1;
      string base_money = 2;
      repeated Data data = 3;
      uint64 init_order = 4;
      string rate = 5;
      uint64 trader_num = 6;

      message Data {
        // Order 消息类型的字段
        string symbol = 1;
        string type = 2;
        string price = 3;
        string side = 4;
        string qty = 5;
        string proportion = 6;
        string position = 7;
      }
    }
  }

  SendBody send_body = 1;
}

message ListenTraderAndUserOrderReply {
  string status = 1;
}

message PullTradingBoxOpenRequest {}

message PullTradingBoxOpenReply {}

message SettleTradingBoxOpenRequest {}

message SettleTradingBoxOpenReply {}

message PullBinanceTradeHistoryRequest{}

message PullBinanceTradeHistoryReply {}

message GetBinanceTraderPositionHistoryRequest{
  uint64 id = 1;
}

message GetBinanceTraderPositionHistoryReply {
  repeated Position positions = 1;
  message Position {
    string symbol = 1;
    string side = 2;
    double closingPnl = 3;
  }

  double winRate = 2;
  double winLostRate = 3;
  double revenueRate = 4;
}

message UserOrderDoReply {}

message UserOrderDoRequest{
  string apiKey = 1;
  string apiSecret = 2;
  string apiKeyTwo = 3;
  string apiSecretTwo = 4;
  double amount = 5; // 仓位数量1，usdt金额
  double amountTwo = 7; // 仓位数量2，usdt金额
  int64 num = 6; // 杠杆
  int64 numTwo = 8; //杠杆2
  string symbol = 9; // 仓位 例如：BTCUSDT
  string symbolTwo = 10; // 仓位2
  string side = 11;
  string sideTwo = 12;
  double price = 13;
  double priceTwo = 14;
  double priceOpen = 15;
  double priceOpenTwo = 16;
  int64 redo = 19;
  int64 redoNum = 20;
}

message UserOrderDoHandlePriceReply {}

message UserOrderDoHandlePriceRequest{}

message PullFilDataReply {}

message PullFilDataRequest{
  string address = 1;
}

message GetFilDataReply {
  repeated DataList list = 1;
  message DataList {
    string to = 1;
    string value = 2;
    string canGet = 3;
    repeated DataList listChild = 4;
    bool already = 5;
  }
}

message GetFilDataRequest{
  string address = 1;
}

message GetBinanceTradersTradeReply {
  repeated DataList list = 1;
  message DataList {
    uint64 time = 6;
    string created_at = 5;
    string symbol = 2;
    string side = 3;
    string position_side = 4;
    double qty = 7;
  }
}

message GetBinanceTradersTradeRequest {
  uint64 traderNum = 1;
}

message GetUserBindDataReply {
  repeated DataList list = 1;
  message DataList {
    uint64 id = 1;
    uint64 userId = 6;
    string address = 5;
    uint64 amount = 2;
    string traderNum = 3;
    string traderName = 4;
  }
}

message GetUserBindDataRequest {
}

message InsertUserBindDataRequest {
  message SendBody {
    uint64 user_id = 1;
    string trader_num = 2;
    uint64 amount = 3;
    string address = 4;
  }

  SendBody send_body = 1;
}

message InsertUserBindDataReply {
  string msg = 1;
  bool res = 2;
}

message DeleteUserBindDataRequest {
  message SendBody {
    uint64 id = 1;
  }

  SendBody send_body = 1;
}

message DeleteUserBindDataReply {
  string msg = 1;
  bool res = 2;
}

message HandlePRequest {
}

message HandlePReply {
}

message GetUserAndTraderRequest {
}

message GetUserAndTraderReply {
  repeated DataList list = 1;

  message DataList {
    uint64 userId = 1;
    string address = 2;
    string apiKey = 3;
    string apiSecret = 4;
    uint64 apiStatus = 5;

    repeated DataBindTraderList traderList = 6;
  }

  message DataBindTraderList {
    uint64 id = 4;
    uint64 traderId = 1;
    uint64 traderNum = 2;
    string traderName= 5;
    uint64 amount = 3;
  }
}

message GetTraderPositionRequest {
  uint64 traderId = 1;
}

message GetTraderPositionReply {
  repeated DataList list = 1;

  message DataList {
    uint64 id = 4;
    string symbol = 1;
    double amount = 2;
    string positionSide = 3;
  }
}

message GetUserPositionRequest {
  uint64 userId = 1;
  uint64 traderId = 2;
}

message GetUserPositionReply {
  repeated DataList list = 1;

  message DataList {
    string symbol = 1;
    double amount = 2;
    string positionSide = 3;
  }
}

message OpenPositionRequest {
  message SendBody {
    uint64 bindId = 1;
    uint64 positionId = 2; // 指定仓位
    double amount = 3; // 金额
    bool useSystemInit = 4; // 系统初始化
  }

  SendBody send_body = 1;
}

message OpenPositionReply {
  string msg = 1;
  bool res = 2;
}

message InitPositionRequest {
  message SendBody {
    uint64 userId = 1;
  }

  SendBody send_body = 1;
}

message InitPositionReply {
  string msg = 1;
  bool res = 2;
}

message UnbindAndClosePositionRequest {
  message SendBody {
    uint64 userId = 1;
    uint64 traderId = 2;
  }

  SendBody send_body = 1;
}

message UnbindAndClosePositionReply {
  string msg = 1;
  bool res = 2;
}