// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v3.21.7
// source: api/binanceexchange_user/v1/binanceexchange_user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBinanceUserAdminOverOrderAfterBind = "/BinanceUser/AdminOverOrderAfterBind"
const OperationBinanceUserAdminOverOrderAfterBindTwo = "/BinanceUser/AdminOverOrderAfterBindTwo"
const OperationBinanceUserAdminOverOrderTwoByInfo = "/BinanceUser/AdminOverOrderTwoByInfo"
const OperationBinanceUserAnalyze = "/BinanceUser/Analyze"
const OperationBinanceUserBindTrader = "/BinanceUser/BindTrader"
const OperationBinanceUserCloseOrderAfterBind = "/BinanceUser/CloseOrderAfterBind"
const OperationBinanceUserCloseOrderAfterBindTwo = "/BinanceUser/CloseOrderAfterBindTwo"
const OperationBinanceUserDeleteUserBindData = "/BinanceUser/DeleteUserBindData"
const OperationBinanceUserExchangeUserLeverAge = "/BinanceUser/ExchangeUserLeverAge"
const OperationBinanceUserGetBinanceTraderPosition = "/BinanceUser/GetBinanceTraderPosition"
const OperationBinanceUserGetBinanceTradersTrade = "/BinanceUser/GetBinanceTradersTrade"
const OperationBinanceUserGetFilData = "/BinanceUser/GetFilData"
const OperationBinanceUserGetTraderPosition = "/BinanceUser/GetTraderPosition"
const OperationBinanceUserGetUser = "/BinanceUser/GetUser"
const OperationBinanceUserGetUserAndTrader = "/BinanceUser/GetUserAndTrader"
const OperationBinanceUserGetUserBindData = "/BinanceUser/GetUserBindData"
const OperationBinanceUserGetUserPosition = "/BinanceUser/GetUserPosition"
const OperationBinanceUserHandleChange = "/BinanceUser/HandleChange"
const OperationBinanceUserHandleP = "/BinanceUser/HandleP"
const OperationBinanceUserInitOrderAfterBind = "/BinanceUser/InitOrderAfterBind"
const OperationBinanceUserInitOrderAfterBindTwo = "/BinanceUser/InitOrderAfterBindTwo"
const OperationBinanceUserInitOrderAfterBindTwoNew = "/BinanceUser/InitOrderAfterBindTwoNew"
const OperationBinanceUserInsertUserBindData = "/BinanceUser/InsertUserBindData"
const OperationBinanceUserListenOrderNew = "/BinanceUser/ListenOrderNew"
const OperationBinanceUserListenTraderAndUserOrder = "/BinanceUser/ListenTraderAndUserOrder"
const OperationBinanceUserListenTraderAndUserOrderNew = "/BinanceUser/ListenTraderAndUserOrderNew"
const OperationBinanceUserOrderAdminTwo = "/BinanceUser/OrderAdminTwo"
const OperationBinanceUserOrderHandle = "/BinanceUser/OrderHandle"
const OperationBinanceUserOrderHandleTwo = "/BinanceUser/OrderHandleTwo"
const OperationBinanceUserOverOrderAfterBind = "/BinanceUser/OverOrderAfterBind"
const OperationBinanceUserOverOrderAfterBindTwo = "/BinanceUser/OverOrderAfterBindTwo"
const OperationBinanceUserPullBinanceTradeHistory = "/BinanceUser/PullBinanceTradeHistory"
const OperationBinanceUserPullFilData = "/BinanceUser/PullFilData"
const OperationBinanceUserPullTradingBoxOpen = "/BinanceUser/PullTradingBoxOpen"
const OperationBinanceUserPullUserCredentialsBsc = "/BinanceUser/PullUserCredentialsBsc"
const OperationBinanceUserPullUserDeposit = "/BinanceUser/PullUserDeposit"
const OperationBinanceUserPullUserDeposit2 = "/BinanceUser/PullUserDeposit2"
const OperationBinanceUserSettleTradingBoxOpen = "/BinanceUser/SettleTradingBoxOpen"
const OperationBinanceUserUserOrderDo = "/BinanceUser/UserOrderDo"
const OperationBinanceUserUserOrderDoHandlePrice = "/BinanceUser/UserOrderDoHandlePrice"
const OperationBinanceUserUserOrderDoTwo = "/BinanceUser/UserOrderDoTwo"

type BinanceUserHTTPServer interface {
	AdminOverOrderAfterBind(context.Context, *OverOrderAfterBindRequest) (*OverOrderAfterBindReply, error)
	AdminOverOrderAfterBindTwo(context.Context, *OverOrderAfterBindRequest) (*OverOrderAfterBindReply, error)
	AdminOverOrderTwoByInfo(context.Context, *AdminOverOrderTwoByInfoRequest) (*AdminOverOrderTwoByInfoReply, error)
	Analyze(context.Context, *AnalyzeRequest) (*AnalyzeReply, error)
	BindTrader(context.Context, *BindTraderRequest) (*BindTraderReply, error)
	CloseOrderAfterBind(context.Context, *CloseOrderAfterBindRequest) (*CloseOrderAfterBindReply, error)
	CloseOrderAfterBindTwo(context.Context, *CloseOrderAfterBindRequest) (*CloseOrderAfterBindReply, error)
	DeleteUserBindData(context.Context, *DeleteUserBindDataRequest) (*DeleteUserBindDataReply, error)
	ExchangeUserLeverAge(context.Context, *ExchangeUserLeverAgeRequest) (*ExchangeUserLeverAgeReply, error)
	GetBinanceTraderPosition(context.Context, *GetBinanceTraderPositionHistoryRequest) (*GetBinanceTraderPositionHistoryReply, error)
	GetBinanceTradersTrade(context.Context, *GetBinanceTradersTradeRequest) (*GetBinanceTradersTradeReply, error)
	GetFilData(context.Context, *GetFilDataRequest) (*GetFilDataReply, error)
	GetTraderPosition(context.Context, *GetTraderPositionRequest) (*GetTraderPositionReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	GetUserAndTrader(context.Context, *GetUserAndTraderRequest) (*GetUserAndTraderReply, error)
	GetUserBindData(context.Context, *GetUserBindDataRequest) (*GetUserBindDataReply, error)
	GetUserPosition(context.Context, *GetUserPositionRequest) (*GetUserPositionReply, error)
	HandleChange(context.Context, *OverOrderAfterBindRequest) (*OverOrderAfterBindReply, error)
	HandleP(context.Context, *HandlePRequest) (*HandlePReply, error)
	InitOrderAfterBind(context.Context, *InitOrderAfterBindRequest) (*InitOrderAfterBindReply, error)
	InitOrderAfterBindTwo(context.Context, *InitOrderAfterBindRequest) (*InitOrderAfterBindReply, error)
	InitOrderAfterBindTwoNew(context.Context, *InitOrderAfterBindRequest) (*InitOrderAfterBindReply, error)
	InsertUserBindData(context.Context, *InsertUserBindDataRequest) (*InsertUserBindDataReply, error)
	ListenOrderNew(context.Context, *ListenTraderAndUserOrderRequest) (*ListenTraderAndUserOrderReply, error)
	ListenTraderAndUserOrder(context.Context, *ListenTraderAndUserOrderRequest) (*ListenTraderAndUserOrderReply, error)
	ListenTraderAndUserOrderNew(context.Context, *ListenTraderAndUserOrderRequest) (*ListenTraderAndUserOrderReply, error)
	OrderAdminTwo(context.Context, *OrderAdminTwoRequest) (*OrderAdminTwoReply, error)
	OrderHandle(context.Context, *OrderHandleRequest) (*OrderHandleReply, error)
	OrderHandleTwo(context.Context, *OrderHandleRequest) (*OrderHandleReply, error)
	OverOrderAfterBind(context.Context, *OverOrderAfterBindRequest) (*OverOrderAfterBindReply, error)
	OverOrderAfterBindTwo(context.Context, *OverOrderAfterBindRequest) (*OverOrderAfterBindReply, error)
	PullBinanceTradeHistory(context.Context, *PullBinanceTradeHistoryRequest) (*PullBinanceTradeHistoryReply, error)
	PullFilData(context.Context, *PullFilDataRequest) (*PullFilDataReply, error)
	PullTradingBoxOpen(context.Context, *PullTradingBoxOpenRequest) (*PullTradingBoxOpenReply, error)
	PullUserCredentialsBsc(context.Context, *PullUserCredentialsBscRequest) (*PullUserCredentialsBscReply, error)
	PullUserDeposit(context.Context, *PullUserDepositRequest) (*PullUserDepositReply, error)
	PullUserDeposit2(context.Context, *PullUserDepositRequest) (*PullUserDepositReply, error)
	SettleTradingBoxOpen(context.Context, *SettleTradingBoxOpenRequest) (*SettleTradingBoxOpenReply, error)
	UserOrderDo(context.Context, *UserOrderDoRequest) (*UserOrderDoReply, error)
	UserOrderDoHandlePrice(context.Context, *UserOrderDoHandlePriceRequest) (*UserOrderDoHandlePriceReply, error)
	UserOrderDoTwo(context.Context, *UserOrderDoRequest) (*UserOrderDoReply, error)
}

func RegisterBinanceUserHTTPServer(s *http.Server, srv BinanceUserHTTPServer) {
	r := s.Route("/")
	r.GET("/api/binanceexchange_user/get_user", _BinanceUser_GetUser0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/pull_user_deposit", _BinanceUser_PullUserDeposit0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/pull_user_deposit_2", _BinanceUser_PullUserDeposit20_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/pull_user_credentials_bsc", _BinanceUser_PullUserCredentialsBsc0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/bind_trader", _BinanceUser_BindTrader0_HTTP_Handler(srv))
	r.POST("/api/binanceexchange_user/listen_trader_and_user_order", _BinanceUser_ListenTraderAndUserOrder0_HTTP_Handler(srv))
	r.POST("/api/binanceexchange_user/listen_trader_and_user_order_new", _BinanceUser_ListenTraderAndUserOrderNew0_HTTP_Handler(srv))
	r.POST("/api/binanceexchange_user/listen_trader_and_user_order_last", _BinanceUser_ListenOrderNew0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/order_handle", _BinanceUser_OrderHandle0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/order_handle_two", _BinanceUser_OrderHandleTwo0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/analyze", _BinanceUser_Analyze0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/close_order_after_bind", _BinanceUser_CloseOrderAfterBind0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/close_order_after_bind_tfi", _BinanceUser_CloseOrderAfterBindTwo0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/init_order_after_bind", _BinanceUser_InitOrderAfterBind0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/init_order_after_bind_tfi", _BinanceUser_InitOrderAfterBindTwo0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/init_order_after_bind_tfi_new", _BinanceUser_InitOrderAfterBindTwoNew0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/handle_change", _BinanceUser_HandleChange0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/over_order_after_bind", _BinanceUser_OverOrderAfterBind0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/over_order_after_bind_tfi", _BinanceUser_OverOrderAfterBindTwo0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/admin_over_order_after_bind", _BinanceUser_AdminOverOrderAfterBind0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/admin_over_order_after_bind_tfi", _BinanceUser_AdminOverOrderAfterBindTwo0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/admin_over_order_two_by_info", _BinanceUser_AdminOverOrderTwoByInfo0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/order_admin_two", _BinanceUser_OrderAdminTwo0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/exchange_user_lever_age", _BinanceUser_ExchangeUserLeverAge0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/pull_trading_box_open", _BinanceUser_PullTradingBoxOpen0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/settle_trading_box_open", _BinanceUser_SettleTradingBoxOpen0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/pull_binance_trade_history", _BinanceUser_PullBinanceTradeHistory0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/get_binance_trader_position_history", _BinanceUser_GetBinanceTraderPosition0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/user_order_do", _BinanceUser_UserOrderDo0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/user_order_do_two", _BinanceUser_UserOrderDoTwo0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/user_order_do_handel_price", _BinanceUser_UserOrderDoHandlePrice0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/pull_fil_data", _BinanceUser_PullFilData0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/get_fil_data", _BinanceUser_GetFilData0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/get_user_bind_data", _BinanceUser_GetUserBindData0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/get_binance_traders_trader", _BinanceUser_GetBinanceTradersTrade0_HTTP_Handler(srv))
	r.POST("/api/binanceexchange_user/insert_user_bind_data", _BinanceUser_InsertUserBindData0_HTTP_Handler(srv))
	r.POST("/api/binanceexchange_user/delete_user_bind_data", _BinanceUser_DeleteUserBindData0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/handle_p", _BinanceUser_HandleP0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/get_user_and_trader", _BinanceUser_GetUserAndTrader0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/get_trader_positions", _BinanceUser_GetTraderPosition0_HTTP_Handler(srv))
	r.GET("/api/binanceexchange_user/get_user_positions", _BinanceUser_GetUserPosition0_HTTP_Handler(srv))
}

func _BinanceUser_GetUser0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_PullUserDeposit0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PullUserDepositRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserPullUserDeposit)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PullUserDeposit(ctx, req.(*PullUserDepositRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PullUserDepositReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_PullUserDeposit20_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PullUserDepositRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserPullUserDeposit2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PullUserDeposit2(ctx, req.(*PullUserDepositRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PullUserDepositReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_PullUserCredentialsBsc0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PullUserCredentialsBscRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserPullUserCredentialsBsc)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PullUserCredentialsBsc(ctx, req.(*PullUserCredentialsBscRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PullUserCredentialsBscReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_BindTrader0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BindTraderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserBindTrader)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BindTrader(ctx, req.(*BindTraderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BindTraderReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_ListenTraderAndUserOrder0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListenTraderAndUserOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserListenTraderAndUserOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListenTraderAndUserOrder(ctx, req.(*ListenTraderAndUserOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListenTraderAndUserOrderReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_ListenTraderAndUserOrderNew0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListenTraderAndUserOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserListenTraderAndUserOrderNew)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListenTraderAndUserOrderNew(ctx, req.(*ListenTraderAndUserOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListenTraderAndUserOrderReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_ListenOrderNew0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListenTraderAndUserOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserListenOrderNew)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListenOrderNew(ctx, req.(*ListenTraderAndUserOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListenTraderAndUserOrderReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_OrderHandle0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderHandleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserOrderHandle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderHandle(ctx, req.(*OrderHandleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderHandleReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_OrderHandleTwo0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderHandleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserOrderHandleTwo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderHandleTwo(ctx, req.(*OrderHandleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderHandleReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_Analyze0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AnalyzeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserAnalyze)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Analyze(ctx, req.(*AnalyzeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AnalyzeReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_CloseOrderAfterBind0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CloseOrderAfterBindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserCloseOrderAfterBind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CloseOrderAfterBind(ctx, req.(*CloseOrderAfterBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CloseOrderAfterBindReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_CloseOrderAfterBindTwo0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CloseOrderAfterBindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserCloseOrderAfterBindTwo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CloseOrderAfterBindTwo(ctx, req.(*CloseOrderAfterBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CloseOrderAfterBindReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_InitOrderAfterBind0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InitOrderAfterBindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserInitOrderAfterBind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InitOrderAfterBind(ctx, req.(*InitOrderAfterBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InitOrderAfterBindReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_InitOrderAfterBindTwo0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InitOrderAfterBindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserInitOrderAfterBindTwo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InitOrderAfterBindTwo(ctx, req.(*InitOrderAfterBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InitOrderAfterBindReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_InitOrderAfterBindTwoNew0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InitOrderAfterBindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserInitOrderAfterBindTwoNew)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InitOrderAfterBindTwoNew(ctx, req.(*InitOrderAfterBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InitOrderAfterBindReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_HandleChange0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OverOrderAfterBindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserHandleChange)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleChange(ctx, req.(*OverOrderAfterBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OverOrderAfterBindReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_OverOrderAfterBind0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OverOrderAfterBindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserOverOrderAfterBind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OverOrderAfterBind(ctx, req.(*OverOrderAfterBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OverOrderAfterBindReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_OverOrderAfterBindTwo0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OverOrderAfterBindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserOverOrderAfterBindTwo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OverOrderAfterBindTwo(ctx, req.(*OverOrderAfterBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OverOrderAfterBindReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_AdminOverOrderAfterBind0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OverOrderAfterBindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserAdminOverOrderAfterBind)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminOverOrderAfterBind(ctx, req.(*OverOrderAfterBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OverOrderAfterBindReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_AdminOverOrderAfterBindTwo0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OverOrderAfterBindRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserAdminOverOrderAfterBindTwo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminOverOrderAfterBindTwo(ctx, req.(*OverOrderAfterBindRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OverOrderAfterBindReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_AdminOverOrderTwoByInfo0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminOverOrderTwoByInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserAdminOverOrderTwoByInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminOverOrderTwoByInfo(ctx, req.(*AdminOverOrderTwoByInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminOverOrderTwoByInfoReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_OrderAdminTwo0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OrderAdminTwoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserOrderAdminTwo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OrderAdminTwo(ctx, req.(*OrderAdminTwoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderAdminTwoReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_ExchangeUserLeverAge0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExchangeUserLeverAgeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserExchangeUserLeverAge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExchangeUserLeverAge(ctx, req.(*ExchangeUserLeverAgeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExchangeUserLeverAgeReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_PullTradingBoxOpen0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PullTradingBoxOpenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserPullTradingBoxOpen)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PullTradingBoxOpen(ctx, req.(*PullTradingBoxOpenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PullTradingBoxOpenReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_SettleTradingBoxOpen0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SettleTradingBoxOpenRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserSettleTradingBoxOpen)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SettleTradingBoxOpen(ctx, req.(*SettleTradingBoxOpenRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SettleTradingBoxOpenReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_PullBinanceTradeHistory0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PullBinanceTradeHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserPullBinanceTradeHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PullBinanceTradeHistory(ctx, req.(*PullBinanceTradeHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PullBinanceTradeHistoryReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_GetBinanceTraderPosition0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBinanceTraderPositionHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserGetBinanceTraderPosition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBinanceTraderPosition(ctx, req.(*GetBinanceTraderPositionHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBinanceTraderPositionHistoryReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_UserOrderDo0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserOrderDoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserUserOrderDo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserOrderDo(ctx, req.(*UserOrderDoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserOrderDoReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_UserOrderDoTwo0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserOrderDoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserUserOrderDoTwo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserOrderDoTwo(ctx, req.(*UserOrderDoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserOrderDoReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_UserOrderDoHandlePrice0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserOrderDoHandlePriceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserUserOrderDoHandlePrice)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserOrderDoHandlePrice(ctx, req.(*UserOrderDoHandlePriceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserOrderDoHandlePriceReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_PullFilData0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PullFilDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserPullFilData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PullFilData(ctx, req.(*PullFilDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PullFilDataReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_GetFilData0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFilDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserGetFilData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFilData(ctx, req.(*GetFilDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFilDataReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_GetUserBindData0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserBindDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserGetUserBindData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserBindData(ctx, req.(*GetUserBindDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserBindDataReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_GetBinanceTradersTrade0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBinanceTradersTradeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserGetBinanceTradersTrade)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBinanceTradersTrade(ctx, req.(*GetBinanceTradersTradeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBinanceTradersTradeReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_InsertUserBindData0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InsertUserBindDataRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserInsertUserBindData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InsertUserBindData(ctx, req.(*InsertUserBindDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InsertUserBindDataReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_DeleteUserBindData0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserBindDataRequest
		if err := ctx.Bind(&in.SendBody); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserDeleteUserBindData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUserBindData(ctx, req.(*DeleteUserBindDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserBindDataReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_HandleP0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HandlePRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserHandleP)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HandleP(ctx, req.(*HandlePRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HandlePReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_GetUserAndTrader0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserAndTraderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserGetUserAndTrader)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserAndTrader(ctx, req.(*GetUserAndTraderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserAndTraderReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_GetTraderPosition0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTraderPositionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserGetTraderPosition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTraderPosition(ctx, req.(*GetTraderPositionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTraderPositionReply)
		return ctx.Result(200, reply)
	}
}

func _BinanceUser_GetUserPosition0_HTTP_Handler(srv BinanceUserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserPositionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBinanceUserGetUserPosition)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserPosition(ctx, req.(*GetUserPositionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserPositionReply)
		return ctx.Result(200, reply)
	}
}

type BinanceUserHTTPClient interface {
	AdminOverOrderAfterBind(ctx context.Context, req *OverOrderAfterBindRequest, opts ...http.CallOption) (rsp *OverOrderAfterBindReply, err error)
	AdminOverOrderAfterBindTwo(ctx context.Context, req *OverOrderAfterBindRequest, opts ...http.CallOption) (rsp *OverOrderAfterBindReply, err error)
	AdminOverOrderTwoByInfo(ctx context.Context, req *AdminOverOrderTwoByInfoRequest, opts ...http.CallOption) (rsp *AdminOverOrderTwoByInfoReply, err error)
	Analyze(ctx context.Context, req *AnalyzeRequest, opts ...http.CallOption) (rsp *AnalyzeReply, err error)
	BindTrader(ctx context.Context, req *BindTraderRequest, opts ...http.CallOption) (rsp *BindTraderReply, err error)
	CloseOrderAfterBind(ctx context.Context, req *CloseOrderAfterBindRequest, opts ...http.CallOption) (rsp *CloseOrderAfterBindReply, err error)
	CloseOrderAfterBindTwo(ctx context.Context, req *CloseOrderAfterBindRequest, opts ...http.CallOption) (rsp *CloseOrderAfterBindReply, err error)
	DeleteUserBindData(ctx context.Context, req *DeleteUserBindDataRequest, opts ...http.CallOption) (rsp *DeleteUserBindDataReply, err error)
	ExchangeUserLeverAge(ctx context.Context, req *ExchangeUserLeverAgeRequest, opts ...http.CallOption) (rsp *ExchangeUserLeverAgeReply, err error)
	GetBinanceTraderPosition(ctx context.Context, req *GetBinanceTraderPositionHistoryRequest, opts ...http.CallOption) (rsp *GetBinanceTraderPositionHistoryReply, err error)
	GetBinanceTradersTrade(ctx context.Context, req *GetBinanceTradersTradeRequest, opts ...http.CallOption) (rsp *GetBinanceTradersTradeReply, err error)
	GetFilData(ctx context.Context, req *GetFilDataRequest, opts ...http.CallOption) (rsp *GetFilDataReply, err error)
	GetTraderPosition(ctx context.Context, req *GetTraderPositionRequest, opts ...http.CallOption) (rsp *GetTraderPositionReply, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *GetUserReply, err error)
	GetUserAndTrader(ctx context.Context, req *GetUserAndTraderRequest, opts ...http.CallOption) (rsp *GetUserAndTraderReply, err error)
	GetUserBindData(ctx context.Context, req *GetUserBindDataRequest, opts ...http.CallOption) (rsp *GetUserBindDataReply, err error)
	GetUserPosition(ctx context.Context, req *GetUserPositionRequest, opts ...http.CallOption) (rsp *GetUserPositionReply, err error)
	HandleChange(ctx context.Context, req *OverOrderAfterBindRequest, opts ...http.CallOption) (rsp *OverOrderAfterBindReply, err error)
	HandleP(ctx context.Context, req *HandlePRequest, opts ...http.CallOption) (rsp *HandlePReply, err error)
	InitOrderAfterBind(ctx context.Context, req *InitOrderAfterBindRequest, opts ...http.CallOption) (rsp *InitOrderAfterBindReply, err error)
	InitOrderAfterBindTwo(ctx context.Context, req *InitOrderAfterBindRequest, opts ...http.CallOption) (rsp *InitOrderAfterBindReply, err error)
	InitOrderAfterBindTwoNew(ctx context.Context, req *InitOrderAfterBindRequest, opts ...http.CallOption) (rsp *InitOrderAfterBindReply, err error)
	InsertUserBindData(ctx context.Context, req *InsertUserBindDataRequest, opts ...http.CallOption) (rsp *InsertUserBindDataReply, err error)
	ListenOrderNew(ctx context.Context, req *ListenTraderAndUserOrderRequest, opts ...http.CallOption) (rsp *ListenTraderAndUserOrderReply, err error)
	ListenTraderAndUserOrder(ctx context.Context, req *ListenTraderAndUserOrderRequest, opts ...http.CallOption) (rsp *ListenTraderAndUserOrderReply, err error)
	ListenTraderAndUserOrderNew(ctx context.Context, req *ListenTraderAndUserOrderRequest, opts ...http.CallOption) (rsp *ListenTraderAndUserOrderReply, err error)
	OrderAdminTwo(ctx context.Context, req *OrderAdminTwoRequest, opts ...http.CallOption) (rsp *OrderAdminTwoReply, err error)
	OrderHandle(ctx context.Context, req *OrderHandleRequest, opts ...http.CallOption) (rsp *OrderHandleReply, err error)
	OrderHandleTwo(ctx context.Context, req *OrderHandleRequest, opts ...http.CallOption) (rsp *OrderHandleReply, err error)
	OverOrderAfterBind(ctx context.Context, req *OverOrderAfterBindRequest, opts ...http.CallOption) (rsp *OverOrderAfterBindReply, err error)
	OverOrderAfterBindTwo(ctx context.Context, req *OverOrderAfterBindRequest, opts ...http.CallOption) (rsp *OverOrderAfterBindReply, err error)
	PullBinanceTradeHistory(ctx context.Context, req *PullBinanceTradeHistoryRequest, opts ...http.CallOption) (rsp *PullBinanceTradeHistoryReply, err error)
	PullFilData(ctx context.Context, req *PullFilDataRequest, opts ...http.CallOption) (rsp *PullFilDataReply, err error)
	PullTradingBoxOpen(ctx context.Context, req *PullTradingBoxOpenRequest, opts ...http.CallOption) (rsp *PullTradingBoxOpenReply, err error)
	PullUserCredentialsBsc(ctx context.Context, req *PullUserCredentialsBscRequest, opts ...http.CallOption) (rsp *PullUserCredentialsBscReply, err error)
	PullUserDeposit(ctx context.Context, req *PullUserDepositRequest, opts ...http.CallOption) (rsp *PullUserDepositReply, err error)
	PullUserDeposit2(ctx context.Context, req *PullUserDepositRequest, opts ...http.CallOption) (rsp *PullUserDepositReply, err error)
	SettleTradingBoxOpen(ctx context.Context, req *SettleTradingBoxOpenRequest, opts ...http.CallOption) (rsp *SettleTradingBoxOpenReply, err error)
	UserOrderDo(ctx context.Context, req *UserOrderDoRequest, opts ...http.CallOption) (rsp *UserOrderDoReply, err error)
	UserOrderDoHandlePrice(ctx context.Context, req *UserOrderDoHandlePriceRequest, opts ...http.CallOption) (rsp *UserOrderDoHandlePriceReply, err error)
	UserOrderDoTwo(ctx context.Context, req *UserOrderDoRequest, opts ...http.CallOption) (rsp *UserOrderDoReply, err error)
}

type BinanceUserHTTPClientImpl struct {
	cc *http.Client
}

func NewBinanceUserHTTPClient(client *http.Client) BinanceUserHTTPClient {
	return &BinanceUserHTTPClientImpl{client}
}

func (c *BinanceUserHTTPClientImpl) AdminOverOrderAfterBind(ctx context.Context, in *OverOrderAfterBindRequest, opts ...http.CallOption) (*OverOrderAfterBindReply, error) {
	var out OverOrderAfterBindReply
	pattern := "/api/binanceexchange_user/admin_over_order_after_bind"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserAdminOverOrderAfterBind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) AdminOverOrderAfterBindTwo(ctx context.Context, in *OverOrderAfterBindRequest, opts ...http.CallOption) (*OverOrderAfterBindReply, error) {
	var out OverOrderAfterBindReply
	pattern := "/api/binanceexchange_user/admin_over_order_after_bind_tfi"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserAdminOverOrderAfterBindTwo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) AdminOverOrderTwoByInfo(ctx context.Context, in *AdminOverOrderTwoByInfoRequest, opts ...http.CallOption) (*AdminOverOrderTwoByInfoReply, error) {
	var out AdminOverOrderTwoByInfoReply
	pattern := "/api/binanceexchange_user/admin_over_order_two_by_info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserAdminOverOrderTwoByInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) Analyze(ctx context.Context, in *AnalyzeRequest, opts ...http.CallOption) (*AnalyzeReply, error) {
	var out AnalyzeReply
	pattern := "/api/binanceexchange_user/analyze"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserAnalyze))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) BindTrader(ctx context.Context, in *BindTraderRequest, opts ...http.CallOption) (*BindTraderReply, error) {
	var out BindTraderReply
	pattern := "/api/binanceexchange_user/bind_trader"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserBindTrader))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) CloseOrderAfterBind(ctx context.Context, in *CloseOrderAfterBindRequest, opts ...http.CallOption) (*CloseOrderAfterBindReply, error) {
	var out CloseOrderAfterBindReply
	pattern := "/api/binanceexchange_user/close_order_after_bind"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserCloseOrderAfterBind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) CloseOrderAfterBindTwo(ctx context.Context, in *CloseOrderAfterBindRequest, opts ...http.CallOption) (*CloseOrderAfterBindReply, error) {
	var out CloseOrderAfterBindReply
	pattern := "/api/binanceexchange_user/close_order_after_bind_tfi"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserCloseOrderAfterBindTwo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) DeleteUserBindData(ctx context.Context, in *DeleteUserBindDataRequest, opts ...http.CallOption) (*DeleteUserBindDataReply, error) {
	var out DeleteUserBindDataReply
	pattern := "/api/binanceexchange_user/delete_user_bind_data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBinanceUserDeleteUserBindData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) ExchangeUserLeverAge(ctx context.Context, in *ExchangeUserLeverAgeRequest, opts ...http.CallOption) (*ExchangeUserLeverAgeReply, error) {
	var out ExchangeUserLeverAgeReply
	pattern := "/api/binanceexchange_user/exchange_user_lever_age"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserExchangeUserLeverAge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) GetBinanceTraderPosition(ctx context.Context, in *GetBinanceTraderPositionHistoryRequest, opts ...http.CallOption) (*GetBinanceTraderPositionHistoryReply, error) {
	var out GetBinanceTraderPositionHistoryReply
	pattern := "/api/binanceexchange_user/get_binance_trader_position_history"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserGetBinanceTraderPosition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) GetBinanceTradersTrade(ctx context.Context, in *GetBinanceTradersTradeRequest, opts ...http.CallOption) (*GetBinanceTradersTradeReply, error) {
	var out GetBinanceTradersTradeReply
	pattern := "/api/binanceexchange_user/get_binance_traders_trader"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserGetBinanceTradersTrade))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) GetFilData(ctx context.Context, in *GetFilDataRequest, opts ...http.CallOption) (*GetFilDataReply, error) {
	var out GetFilDataReply
	pattern := "/api/binanceexchange_user/get_fil_data"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserGetFilData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) GetTraderPosition(ctx context.Context, in *GetTraderPositionRequest, opts ...http.CallOption) (*GetTraderPositionReply, error) {
	var out GetTraderPositionReply
	pattern := "/api/binanceexchange_user/get_trader_positions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserGetTraderPosition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/api/binanceexchange_user/get_user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) GetUserAndTrader(ctx context.Context, in *GetUserAndTraderRequest, opts ...http.CallOption) (*GetUserAndTraderReply, error) {
	var out GetUserAndTraderReply
	pattern := "/api/binanceexchange_user/get_user_and_trader"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserGetUserAndTrader))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) GetUserBindData(ctx context.Context, in *GetUserBindDataRequest, opts ...http.CallOption) (*GetUserBindDataReply, error) {
	var out GetUserBindDataReply
	pattern := "/api/binanceexchange_user/get_user_bind_data"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserGetUserBindData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) GetUserPosition(ctx context.Context, in *GetUserPositionRequest, opts ...http.CallOption) (*GetUserPositionReply, error) {
	var out GetUserPositionReply
	pattern := "/api/binanceexchange_user/get_user_positions"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserGetUserPosition))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) HandleChange(ctx context.Context, in *OverOrderAfterBindRequest, opts ...http.CallOption) (*OverOrderAfterBindReply, error) {
	var out OverOrderAfterBindReply
	pattern := "/api/binanceexchange_user/handle_change"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserHandleChange))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) HandleP(ctx context.Context, in *HandlePRequest, opts ...http.CallOption) (*HandlePReply, error) {
	var out HandlePReply
	pattern := "/api/binanceexchange_user/handle_p"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserHandleP))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) InitOrderAfterBind(ctx context.Context, in *InitOrderAfterBindRequest, opts ...http.CallOption) (*InitOrderAfterBindReply, error) {
	var out InitOrderAfterBindReply
	pattern := "/api/binanceexchange_user/init_order_after_bind"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserInitOrderAfterBind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) InitOrderAfterBindTwo(ctx context.Context, in *InitOrderAfterBindRequest, opts ...http.CallOption) (*InitOrderAfterBindReply, error) {
	var out InitOrderAfterBindReply
	pattern := "/api/binanceexchange_user/init_order_after_bind_tfi"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserInitOrderAfterBindTwo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) InitOrderAfterBindTwoNew(ctx context.Context, in *InitOrderAfterBindRequest, opts ...http.CallOption) (*InitOrderAfterBindReply, error) {
	var out InitOrderAfterBindReply
	pattern := "/api/binanceexchange_user/init_order_after_bind_tfi_new"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserInitOrderAfterBindTwoNew))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) InsertUserBindData(ctx context.Context, in *InsertUserBindDataRequest, opts ...http.CallOption) (*InsertUserBindDataReply, error) {
	var out InsertUserBindDataReply
	pattern := "/api/binanceexchange_user/insert_user_bind_data"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBinanceUserInsertUserBindData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in.SendBody, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) ListenOrderNew(ctx context.Context, in *ListenTraderAndUserOrderRequest, opts ...http.CallOption) (*ListenTraderAndUserOrderReply, error) {
	var out ListenTraderAndUserOrderReply
	pattern := "/api/binanceexchange_user/listen_trader_and_user_order_last"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBinanceUserListenOrderNew))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) ListenTraderAndUserOrder(ctx context.Context, in *ListenTraderAndUserOrderRequest, opts ...http.CallOption) (*ListenTraderAndUserOrderReply, error) {
	var out ListenTraderAndUserOrderReply
	pattern := "/api/binanceexchange_user/listen_trader_and_user_order"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBinanceUserListenTraderAndUserOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) ListenTraderAndUserOrderNew(ctx context.Context, in *ListenTraderAndUserOrderRequest, opts ...http.CallOption) (*ListenTraderAndUserOrderReply, error) {
	var out ListenTraderAndUserOrderReply
	pattern := "/api/binanceexchange_user/listen_trader_and_user_order_new"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBinanceUserListenTraderAndUserOrderNew))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) OrderAdminTwo(ctx context.Context, in *OrderAdminTwoRequest, opts ...http.CallOption) (*OrderAdminTwoReply, error) {
	var out OrderAdminTwoReply
	pattern := "/api/binanceexchange_user/order_admin_two"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserOrderAdminTwo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) OrderHandle(ctx context.Context, in *OrderHandleRequest, opts ...http.CallOption) (*OrderHandleReply, error) {
	var out OrderHandleReply
	pattern := "/api/binanceexchange_user/order_handle"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserOrderHandle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) OrderHandleTwo(ctx context.Context, in *OrderHandleRequest, opts ...http.CallOption) (*OrderHandleReply, error) {
	var out OrderHandleReply
	pattern := "/api/binanceexchange_user/order_handle_two"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserOrderHandleTwo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) OverOrderAfterBind(ctx context.Context, in *OverOrderAfterBindRequest, opts ...http.CallOption) (*OverOrderAfterBindReply, error) {
	var out OverOrderAfterBindReply
	pattern := "/api/binanceexchange_user/over_order_after_bind"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserOverOrderAfterBind))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) OverOrderAfterBindTwo(ctx context.Context, in *OverOrderAfterBindRequest, opts ...http.CallOption) (*OverOrderAfterBindReply, error) {
	var out OverOrderAfterBindReply
	pattern := "/api/binanceexchange_user/over_order_after_bind_tfi"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserOverOrderAfterBindTwo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) PullBinanceTradeHistory(ctx context.Context, in *PullBinanceTradeHistoryRequest, opts ...http.CallOption) (*PullBinanceTradeHistoryReply, error) {
	var out PullBinanceTradeHistoryReply
	pattern := "/api/binanceexchange_user/pull_binance_trade_history"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserPullBinanceTradeHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) PullFilData(ctx context.Context, in *PullFilDataRequest, opts ...http.CallOption) (*PullFilDataReply, error) {
	var out PullFilDataReply
	pattern := "/api/binanceexchange_user/pull_fil_data"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserPullFilData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) PullTradingBoxOpen(ctx context.Context, in *PullTradingBoxOpenRequest, opts ...http.CallOption) (*PullTradingBoxOpenReply, error) {
	var out PullTradingBoxOpenReply
	pattern := "/api/binanceexchange_user/pull_trading_box_open"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserPullTradingBoxOpen))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) PullUserCredentialsBsc(ctx context.Context, in *PullUserCredentialsBscRequest, opts ...http.CallOption) (*PullUserCredentialsBscReply, error) {
	var out PullUserCredentialsBscReply
	pattern := "/api/binanceexchange_user/pull_user_credentials_bsc"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserPullUserCredentialsBsc))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) PullUserDeposit(ctx context.Context, in *PullUserDepositRequest, opts ...http.CallOption) (*PullUserDepositReply, error) {
	var out PullUserDepositReply
	pattern := "/api/binanceexchange_user/pull_user_deposit"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserPullUserDeposit))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) PullUserDeposit2(ctx context.Context, in *PullUserDepositRequest, opts ...http.CallOption) (*PullUserDepositReply, error) {
	var out PullUserDepositReply
	pattern := "/api/binanceexchange_user/pull_user_deposit_2"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserPullUserDeposit2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) SettleTradingBoxOpen(ctx context.Context, in *SettleTradingBoxOpenRequest, opts ...http.CallOption) (*SettleTradingBoxOpenReply, error) {
	var out SettleTradingBoxOpenReply
	pattern := "/api/binanceexchange_user/settle_trading_box_open"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserSettleTradingBoxOpen))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) UserOrderDo(ctx context.Context, in *UserOrderDoRequest, opts ...http.CallOption) (*UserOrderDoReply, error) {
	var out UserOrderDoReply
	pattern := "/api/binanceexchange_user/user_order_do"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserUserOrderDo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) UserOrderDoHandlePrice(ctx context.Context, in *UserOrderDoHandlePriceRequest, opts ...http.CallOption) (*UserOrderDoHandlePriceReply, error) {
	var out UserOrderDoHandlePriceReply
	pattern := "/api/binanceexchange_user/user_order_do_handel_price"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserUserOrderDoHandlePrice))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BinanceUserHTTPClientImpl) UserOrderDoTwo(ctx context.Context, in *UserOrderDoRequest, opts ...http.CallOption) (*UserOrderDoReply, error) {
	var out UserOrderDoReply
	pattern := "/api/binanceexchange_user/user_order_do_two"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationBinanceUserUserOrderDoTwo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
