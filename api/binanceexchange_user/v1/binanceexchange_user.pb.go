// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: api/binanceexchange_user/v1/binanceexchange_user.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Play       int64  `protobuf:"varint,4,opt,name=play,proto3" json:"play,omitempty"`
	Status     int64  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Amount     int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Balance    string `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
	BalanceTfi string `protobuf:"bytes,5,opt,name=balanceTfi,proto3" json:"balanceTfi,omitempty"`
	AmountTfi  int64  `protobuf:"varint,6,opt,name=amountTfi,proto3" json:"amountTfi,omitempty"`
}

func (x *GetUserReply) Reset() {
	*x = GetUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserReply) ProtoMessage() {}

func (x *GetUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserReply.ProtoReflect.Descriptor instead.
func (*GetUserReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{1}
}

func (x *GetUserReply) GetPlay() int64 {
	if x != nil {
		return x.Play
	}
	return 0
}

func (x *GetUserReply) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetUserReply) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetUserReply) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *GetUserReply) GetBalanceTfi() string {
	if x != nil {
		return x.BalanceTfi
	}
	return ""
}

func (x *GetUserReply) GetAmountTfi() int64 {
	if x != nil {
		return x.AmountTfi
	}
	return 0
}

type PullUserDepositRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullUserDepositRequest) Reset() {
	*x = PullUserDepositRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullUserDepositRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullUserDepositRequest) ProtoMessage() {}

func (x *PullUserDepositRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullUserDepositRequest.ProtoReflect.Descriptor instead.
func (*PullUserDepositRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{2}
}

type PullUserDepositReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullUserDepositReply) Reset() {
	*x = PullUserDepositReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullUserDepositReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullUserDepositReply) ProtoMessage() {}

func (x *PullUserDepositReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullUserDepositReply.ProtoReflect.Descriptor instead.
func (*PullUserDepositReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{3}
}

type PullUserCredentialsBscRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullUserCredentialsBscRequest) Reset() {
	*x = PullUserCredentialsBscRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullUserCredentialsBscRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullUserCredentialsBscRequest) ProtoMessage() {}

func (x *PullUserCredentialsBscRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullUserCredentialsBscRequest.ProtoReflect.Descriptor instead.
func (*PullUserCredentialsBscRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{4}
}

type PullUserCredentialsBscReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullUserCredentialsBscReply) Reset() {
	*x = PullUserCredentialsBscReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullUserCredentialsBscReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullUserCredentialsBscReply) ProtoMessage() {}

func (x *PullUserCredentialsBscReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullUserCredentialsBscReply.ProtoReflect.Descriptor instead.
func (*PullUserCredentialsBscReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{5}
}

type BindTraderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BindTraderRequest) Reset() {
	*x = BindTraderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindTraderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindTraderRequest) ProtoMessage() {}

func (x *BindTraderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindTraderRequest.ProtoReflect.Descriptor instead.
func (*BindTraderRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{6}
}

type BindTraderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BindTraderReply) Reset() {
	*x = BindTraderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindTraderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindTraderReply) ProtoMessage() {}

func (x *BindTraderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindTraderReply.ProtoReflect.Descriptor instead.
func (*BindTraderReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{7}
}

type AnalyzeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnalyzeRequest) Reset() {
	*x = AnalyzeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeRequest) ProtoMessage() {}

func (x *AnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{8}
}

type AnalyzeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnalyzeReply) Reset() {
	*x = AnalyzeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeReply) ProtoMessage() {}

func (x *AnalyzeReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeReply.ProtoReflect.Descriptor instead.
func (*AnalyzeReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{9}
}

type CloseOrderAfterBindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseOrderAfterBindRequest) Reset() {
	*x = CloseOrderAfterBindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseOrderAfterBindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseOrderAfterBindRequest) ProtoMessage() {}

func (x *CloseOrderAfterBindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseOrderAfterBindRequest.ProtoReflect.Descriptor instead.
func (*CloseOrderAfterBindRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{10}
}

type CloseOrderAfterBindReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloseOrderAfterBindReply) Reset() {
	*x = CloseOrderAfterBindReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseOrderAfterBindReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseOrderAfterBindReply) ProtoMessage() {}

func (x *CloseOrderAfterBindReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseOrderAfterBindReply.ProtoReflect.Descriptor instead.
func (*CloseOrderAfterBindReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{11}
}

type InitOrderAfterBindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitOrderAfterBindRequest) Reset() {
	*x = InitOrderAfterBindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitOrderAfterBindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitOrderAfterBindRequest) ProtoMessage() {}

func (x *InitOrderAfterBindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitOrderAfterBindRequest.ProtoReflect.Descriptor instead.
func (*InitOrderAfterBindRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{12}
}

type InitOrderAfterBindReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitOrderAfterBindReply) Reset() {
	*x = InitOrderAfterBindReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitOrderAfterBindReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitOrderAfterBindReply) ProtoMessage() {}

func (x *InitOrderAfterBindReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitOrderAfterBindReply.ProtoReflect.Descriptor instead.
func (*InitOrderAfterBindReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{13}
}

type OverOrderAfterBindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OverOrderAfterBindRequest) Reset() {
	*x = OverOrderAfterBindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverOrderAfterBindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverOrderAfterBindRequest) ProtoMessage() {}

func (x *OverOrderAfterBindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverOrderAfterBindRequest.ProtoReflect.Descriptor instead.
func (*OverOrderAfterBindRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{14}
}

type OverOrderAfterBindReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OverOrderAfterBindReply) Reset() {
	*x = OverOrderAfterBindReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverOrderAfterBindReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverOrderAfterBindReply) ProtoMessage() {}

func (x *OverOrderAfterBindReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverOrderAfterBindReply.ProtoReflect.Descriptor instead.
func (*OverOrderAfterBindReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{15}
}

type AdminOverOrderTwoByInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey       string  `protobuf:"bytes,1,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	ApiSecret    string  `protobuf:"bytes,2,opt,name=apiSecret,proto3" json:"apiSecret,omitempty"`
	Symbol       string  `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Num          float64 `protobuf:"fixed64,4,opt,name=num,proto3" json:"num,omitempty"`
	PositionSide string  `protobuf:"bytes,5,opt,name=positionSide,proto3" json:"positionSide,omitempty"`
}

func (x *AdminOverOrderTwoByInfoRequest) Reset() {
	*x = AdminOverOrderTwoByInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminOverOrderTwoByInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminOverOrderTwoByInfoRequest) ProtoMessage() {}

func (x *AdminOverOrderTwoByInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminOverOrderTwoByInfoRequest.ProtoReflect.Descriptor instead.
func (*AdminOverOrderTwoByInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{16}
}

func (x *AdminOverOrderTwoByInfoRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *AdminOverOrderTwoByInfoRequest) GetApiSecret() string {
	if x != nil {
		return x.ApiSecret
	}
	return ""
}

func (x *AdminOverOrderTwoByInfoRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AdminOverOrderTwoByInfoRequest) GetNum() float64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *AdminOverOrderTwoByInfoRequest) GetPositionSide() string {
	if x != nil {
		return x.PositionSide
	}
	return ""
}

type AdminOverOrderTwoByInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdminOverOrderTwoByInfoReply) Reset() {
	*x = AdminOverOrderTwoByInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminOverOrderTwoByInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminOverOrderTwoByInfoReply) ProtoMessage() {}

func (x *AdminOverOrderTwoByInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminOverOrderTwoByInfoReply.ProtoReflect.Descriptor instead.
func (*AdminOverOrderTwoByInfoReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{17}
}

type OrderAdminTwoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraderId uint64 `protobuf:"varint,2,opt,name=trader_id,json=traderId,proto3" json:"trader_id,omitempty"`
	Symbol   string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *OrderAdminTwoRequest) Reset() {
	*x = OrderAdminTwoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAdminTwoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAdminTwoRequest) ProtoMessage() {}

func (x *OrderAdminTwoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAdminTwoRequest.ProtoReflect.Descriptor instead.
func (*OrderAdminTwoRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{18}
}

func (x *OrderAdminTwoRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OrderAdminTwoRequest) GetTraderId() uint64 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

func (x *OrderAdminTwoRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type OrderAdminTwoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderAdminTwoReply) Reset() {
	*x = OrderAdminTwoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAdminTwoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAdminTwoReply) ProtoMessage() {}

func (x *OrderAdminTwoReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAdminTwoReply.ProtoReflect.Descriptor instead.
func (*OrderAdminTwoReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{19}
}

type ExchangeUserLeverAgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Symbol string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Num    uint64 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *ExchangeUserLeverAgeRequest) Reset() {
	*x = ExchangeUserLeverAgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeUserLeverAgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeUserLeverAgeRequest) ProtoMessage() {}

func (x *ExchangeUserLeverAgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeUserLeverAgeRequest.ProtoReflect.Descriptor instead.
func (*ExchangeUserLeverAgeRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{20}
}

func (x *ExchangeUserLeverAgeRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ExchangeUserLeverAgeRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ExchangeUserLeverAgeRequest) GetNum() uint64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type ExchangeUserLeverAgeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExchangeUserLeverAgeReply) Reset() {
	*x = ExchangeUserLeverAgeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeUserLeverAgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeUserLeverAgeReply) ProtoMessage() {}

func (x *ExchangeUserLeverAgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeUserLeverAgeReply.ProtoReflect.Descriptor instead.
func (*ExchangeUserLeverAgeReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{21}
}

type OrderHandleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderHandleRequest) Reset() {
	*x = OrderHandleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHandleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHandleRequest) ProtoMessage() {}

func (x *OrderHandleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHandleRequest.ProtoReflect.Descriptor instead.
func (*OrderHandleRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{22}
}

type OrderHandleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrderHandleReply) Reset() {
	*x = OrderHandleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderHandleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderHandleReply) ProtoMessage() {}

func (x *OrderHandleReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderHandleReply.ProtoReflect.Descriptor instead.
func (*OrderHandleReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{23}
}

type ListenTraderAndUserOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendBody *ListenTraderAndUserOrderRequest_SendBody `protobuf:"bytes,1,opt,name=send_body,json=sendBody,proto3" json:"send_body,omitempty"`
}

func (x *ListenTraderAndUserOrderRequest) Reset() {
	*x = ListenTraderAndUserOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenTraderAndUserOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTraderAndUserOrderRequest) ProtoMessage() {}

func (x *ListenTraderAndUserOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTraderAndUserOrderRequest.ProtoReflect.Descriptor instead.
func (*ListenTraderAndUserOrderRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{24}
}

func (x *ListenTraderAndUserOrderRequest) GetSendBody() *ListenTraderAndUserOrderRequest_SendBody {
	if x != nil {
		return x.SendBody
	}
	return nil
}

type ListenTraderAndUserOrderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ListenTraderAndUserOrderReply) Reset() {
	*x = ListenTraderAndUserOrderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenTraderAndUserOrderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTraderAndUserOrderReply) ProtoMessage() {}

func (x *ListenTraderAndUserOrderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTraderAndUserOrderReply.ProtoReflect.Descriptor instead.
func (*ListenTraderAndUserOrderReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{25}
}

func (x *ListenTraderAndUserOrderReply) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type PullTradingBoxOpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullTradingBoxOpenRequest) Reset() {
	*x = PullTradingBoxOpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullTradingBoxOpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullTradingBoxOpenRequest) ProtoMessage() {}

func (x *PullTradingBoxOpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullTradingBoxOpenRequest.ProtoReflect.Descriptor instead.
func (*PullTradingBoxOpenRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{26}
}

type PullTradingBoxOpenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullTradingBoxOpenReply) Reset() {
	*x = PullTradingBoxOpenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullTradingBoxOpenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullTradingBoxOpenReply) ProtoMessage() {}

func (x *PullTradingBoxOpenReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullTradingBoxOpenReply.ProtoReflect.Descriptor instead.
func (*PullTradingBoxOpenReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{27}
}

type SettleTradingBoxOpenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SettleTradingBoxOpenRequest) Reset() {
	*x = SettleTradingBoxOpenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleTradingBoxOpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleTradingBoxOpenRequest) ProtoMessage() {}

func (x *SettleTradingBoxOpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleTradingBoxOpenRequest.ProtoReflect.Descriptor instead.
func (*SettleTradingBoxOpenRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{28}
}

type SettleTradingBoxOpenReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SettleTradingBoxOpenReply) Reset() {
	*x = SettleTradingBoxOpenReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettleTradingBoxOpenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettleTradingBoxOpenReply) ProtoMessage() {}

func (x *SettleTradingBoxOpenReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettleTradingBoxOpenReply.ProtoReflect.Descriptor instead.
func (*SettleTradingBoxOpenReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{29}
}

type PullBinanceTradeHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullBinanceTradeHistoryRequest) Reset() {
	*x = PullBinanceTradeHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullBinanceTradeHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullBinanceTradeHistoryRequest) ProtoMessage() {}

func (x *PullBinanceTradeHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullBinanceTradeHistoryRequest.ProtoReflect.Descriptor instead.
func (*PullBinanceTradeHistoryRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{30}
}

type PullBinanceTradeHistoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullBinanceTradeHistoryReply) Reset() {
	*x = PullBinanceTradeHistoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullBinanceTradeHistoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullBinanceTradeHistoryReply) ProtoMessage() {}

func (x *PullBinanceTradeHistoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullBinanceTradeHistoryReply.ProtoReflect.Descriptor instead.
func (*PullBinanceTradeHistoryReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{31}
}

type GetBinanceTraderPositionHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBinanceTraderPositionHistoryRequest) Reset() {
	*x = GetBinanceTraderPositionHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBinanceTraderPositionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBinanceTraderPositionHistoryRequest) ProtoMessage() {}

func (x *GetBinanceTraderPositionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBinanceTraderPositionHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetBinanceTraderPositionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{32}
}

func (x *GetBinanceTraderPositionHistoryRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetBinanceTraderPositionHistoryReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Positions   []*GetBinanceTraderPositionHistoryReply_Position `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions,omitempty"`
	WinRate     float64                                          `protobuf:"fixed64,2,opt,name=winRate,proto3" json:"winRate,omitempty"`
	WinLostRate float64                                          `protobuf:"fixed64,3,opt,name=winLostRate,proto3" json:"winLostRate,omitempty"`
	RevenueRate float64                                          `protobuf:"fixed64,4,opt,name=revenueRate,proto3" json:"revenueRate,omitempty"`
}

func (x *GetBinanceTraderPositionHistoryReply) Reset() {
	*x = GetBinanceTraderPositionHistoryReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBinanceTraderPositionHistoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBinanceTraderPositionHistoryReply) ProtoMessage() {}

func (x *GetBinanceTraderPositionHistoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBinanceTraderPositionHistoryReply.ProtoReflect.Descriptor instead.
func (*GetBinanceTraderPositionHistoryReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{33}
}

func (x *GetBinanceTraderPositionHistoryReply) GetPositions() []*GetBinanceTraderPositionHistoryReply_Position {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *GetBinanceTraderPositionHistoryReply) GetWinRate() float64 {
	if x != nil {
		return x.WinRate
	}
	return 0
}

func (x *GetBinanceTraderPositionHistoryReply) GetWinLostRate() float64 {
	if x != nil {
		return x.WinLostRate
	}
	return 0
}

func (x *GetBinanceTraderPositionHistoryReply) GetRevenueRate() float64 {
	if x != nil {
		return x.RevenueRate
	}
	return 0
}

type UserOrderDoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserOrderDoReply) Reset() {
	*x = UserOrderDoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOrderDoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOrderDoReply) ProtoMessage() {}

func (x *UserOrderDoReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOrderDoReply.ProtoReflect.Descriptor instead.
func (*UserOrderDoReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{34}
}

type UserOrderDoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey       string  `protobuf:"bytes,1,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	ApiSecret    string  `protobuf:"bytes,2,opt,name=apiSecret,proto3" json:"apiSecret,omitempty"`
	ApiKeyTwo    string  `protobuf:"bytes,3,opt,name=apiKeyTwo,proto3" json:"apiKeyTwo,omitempty"`
	ApiSecretTwo string  `protobuf:"bytes,4,opt,name=apiSecretTwo,proto3" json:"apiSecretTwo,omitempty"`
	Amount       float64 `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`       // 仓位数量1，usdt金额
	AmountTwo    float64 `protobuf:"fixed64,7,opt,name=amountTwo,proto3" json:"amountTwo,omitempty"` // 仓位数量2，usdt金额
	Num          int64   `protobuf:"varint,6,opt,name=num,proto3" json:"num,omitempty"`              // 杠杆
	NumTwo       int64   `protobuf:"varint,8,opt,name=numTwo,proto3" json:"numTwo,omitempty"`        //杠杆2
	Symbol       string  `protobuf:"bytes,9,opt,name=symbol,proto3" json:"symbol,omitempty"`         // 仓位 例如：BTCUSDT
	SymbolTwo    string  `protobuf:"bytes,10,opt,name=symbolTwo,proto3" json:"symbolTwo,omitempty"`  // 仓位2
	Side         string  `protobuf:"bytes,11,opt,name=side,proto3" json:"side,omitempty"`
	SideTwo      string  `protobuf:"bytes,12,opt,name=sideTwo,proto3" json:"sideTwo,omitempty"`
	Price        float64 `protobuf:"fixed64,13,opt,name=price,proto3" json:"price,omitempty"`
	PriceTwo     float64 `protobuf:"fixed64,14,opt,name=priceTwo,proto3" json:"priceTwo,omitempty"`
	PriceOpen    float64 `protobuf:"fixed64,15,opt,name=priceOpen,proto3" json:"priceOpen,omitempty"`
	PriceOpenTwo float64 `protobuf:"fixed64,16,opt,name=priceOpenTwo,proto3" json:"priceOpenTwo,omitempty"`
	Redo         int64   `protobuf:"varint,19,opt,name=redo,proto3" json:"redo,omitempty"`
	RedoNum      int64   `protobuf:"varint,20,opt,name=redoNum,proto3" json:"redoNum,omitempty"`
}

func (x *UserOrderDoRequest) Reset() {
	*x = UserOrderDoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOrderDoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOrderDoRequest) ProtoMessage() {}

func (x *UserOrderDoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOrderDoRequest.ProtoReflect.Descriptor instead.
func (*UserOrderDoRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{35}
}

func (x *UserOrderDoRequest) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *UserOrderDoRequest) GetApiSecret() string {
	if x != nil {
		return x.ApiSecret
	}
	return ""
}

func (x *UserOrderDoRequest) GetApiKeyTwo() string {
	if x != nil {
		return x.ApiKeyTwo
	}
	return ""
}

func (x *UserOrderDoRequest) GetApiSecretTwo() string {
	if x != nil {
		return x.ApiSecretTwo
	}
	return ""
}

func (x *UserOrderDoRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserOrderDoRequest) GetAmountTwo() float64 {
	if x != nil {
		return x.AmountTwo
	}
	return 0
}

func (x *UserOrderDoRequest) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *UserOrderDoRequest) GetNumTwo() int64 {
	if x != nil {
		return x.NumTwo
	}
	return 0
}

func (x *UserOrderDoRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UserOrderDoRequest) GetSymbolTwo() string {
	if x != nil {
		return x.SymbolTwo
	}
	return ""
}

func (x *UserOrderDoRequest) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *UserOrderDoRequest) GetSideTwo() string {
	if x != nil {
		return x.SideTwo
	}
	return ""
}

func (x *UserOrderDoRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UserOrderDoRequest) GetPriceTwo() float64 {
	if x != nil {
		return x.PriceTwo
	}
	return 0
}

func (x *UserOrderDoRequest) GetPriceOpen() float64 {
	if x != nil {
		return x.PriceOpen
	}
	return 0
}

func (x *UserOrderDoRequest) GetPriceOpenTwo() float64 {
	if x != nil {
		return x.PriceOpenTwo
	}
	return 0
}

func (x *UserOrderDoRequest) GetRedo() int64 {
	if x != nil {
		return x.Redo
	}
	return 0
}

func (x *UserOrderDoRequest) GetRedoNum() int64 {
	if x != nil {
		return x.RedoNum
	}
	return 0
}

type UserOrderDoHandlePriceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserOrderDoHandlePriceReply) Reset() {
	*x = UserOrderDoHandlePriceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOrderDoHandlePriceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOrderDoHandlePriceReply) ProtoMessage() {}

func (x *UserOrderDoHandlePriceReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOrderDoHandlePriceReply.ProtoReflect.Descriptor instead.
func (*UserOrderDoHandlePriceReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{36}
}

type UserOrderDoHandlePriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserOrderDoHandlePriceRequest) Reset() {
	*x = UserOrderDoHandlePriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOrderDoHandlePriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOrderDoHandlePriceRequest) ProtoMessage() {}

func (x *UserOrderDoHandlePriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOrderDoHandlePriceRequest.ProtoReflect.Descriptor instead.
func (*UserOrderDoHandlePriceRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{37}
}

type PullFilDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PullFilDataReply) Reset() {
	*x = PullFilDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullFilDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullFilDataReply) ProtoMessage() {}

func (x *PullFilDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullFilDataReply.ProtoReflect.Descriptor instead.
func (*PullFilDataReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{38}
}

type PullFilDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *PullFilDataRequest) Reset() {
	*x = PullFilDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PullFilDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PullFilDataRequest) ProtoMessage() {}

func (x *PullFilDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PullFilDataRequest.ProtoReflect.Descriptor instead.
func (*PullFilDataRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{39}
}

func (x *PullFilDataRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetFilDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetFilDataReply_DataList `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetFilDataReply) Reset() {
	*x = GetFilDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilDataReply) ProtoMessage() {}

func (x *GetFilDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilDataReply.ProtoReflect.Descriptor instead.
func (*GetFilDataReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{40}
}

func (x *GetFilDataReply) GetList() []*GetFilDataReply_DataList {
	if x != nil {
		return x.List
	}
	return nil
}

type GetFilDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetFilDataRequest) Reset() {
	*x = GetFilDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilDataRequest) ProtoMessage() {}

func (x *GetFilDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilDataRequest.ProtoReflect.Descriptor instead.
func (*GetFilDataRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{41}
}

func (x *GetFilDataRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetBinanceTradersTradeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetBinanceTradersTradeReply_DataList `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetBinanceTradersTradeReply) Reset() {
	*x = GetBinanceTradersTradeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBinanceTradersTradeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBinanceTradersTradeReply) ProtoMessage() {}

func (x *GetBinanceTradersTradeReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBinanceTradersTradeReply.ProtoReflect.Descriptor instead.
func (*GetBinanceTradersTradeReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{42}
}

func (x *GetBinanceTradersTradeReply) GetList() []*GetBinanceTradersTradeReply_DataList {
	if x != nil {
		return x.List
	}
	return nil
}

type GetBinanceTradersTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraderNum uint64 `protobuf:"varint,1,opt,name=traderNum,proto3" json:"traderNum,omitempty"`
}

func (x *GetBinanceTradersTradeRequest) Reset() {
	*x = GetBinanceTradersTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBinanceTradersTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBinanceTradersTradeRequest) ProtoMessage() {}

func (x *GetBinanceTradersTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBinanceTradersTradeRequest.ProtoReflect.Descriptor instead.
func (*GetBinanceTradersTradeRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{43}
}

func (x *GetBinanceTradersTradeRequest) GetTraderNum() uint64 {
	if x != nil {
		return x.TraderNum
	}
	return 0
}

type GetUserBindDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetUserBindDataReply_DataList `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetUserBindDataReply) Reset() {
	*x = GetUserBindDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBindDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBindDataReply) ProtoMessage() {}

func (x *GetUserBindDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBindDataReply.ProtoReflect.Descriptor instead.
func (*GetUserBindDataReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{44}
}

func (x *GetUserBindDataReply) GetList() []*GetUserBindDataReply_DataList {
	if x != nil {
		return x.List
	}
	return nil
}

type GetUserBindDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserBindDataRequest) Reset() {
	*x = GetUserBindDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBindDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBindDataRequest) ProtoMessage() {}

func (x *GetUserBindDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBindDataRequest.ProtoReflect.Descriptor instead.
func (*GetUserBindDataRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{45}
}

type InsertUserBindDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendBody *InsertUserBindDataRequest_SendBody `protobuf:"bytes,1,opt,name=send_body,json=sendBody,proto3" json:"send_body,omitempty"`
}

func (x *InsertUserBindDataRequest) Reset() {
	*x = InsertUserBindDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertUserBindDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertUserBindDataRequest) ProtoMessage() {}

func (x *InsertUserBindDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertUserBindDataRequest.ProtoReflect.Descriptor instead.
func (*InsertUserBindDataRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{46}
}

func (x *InsertUserBindDataRequest) GetSendBody() *InsertUserBindDataRequest_SendBody {
	if x != nil {
		return x.SendBody
	}
	return nil
}

type InsertUserBindDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Res bool   `protobuf:"varint,2,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *InsertUserBindDataReply) Reset() {
	*x = InsertUserBindDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertUserBindDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertUserBindDataReply) ProtoMessage() {}

func (x *InsertUserBindDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertUserBindDataReply.ProtoReflect.Descriptor instead.
func (*InsertUserBindDataReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{47}
}

func (x *InsertUserBindDataReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *InsertUserBindDataReply) GetRes() bool {
	if x != nil {
		return x.Res
	}
	return false
}

type DeleteUserBindDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendBody *DeleteUserBindDataRequest_SendBody `protobuf:"bytes,1,opt,name=send_body,json=sendBody,proto3" json:"send_body,omitempty"`
}

func (x *DeleteUserBindDataRequest) Reset() {
	*x = DeleteUserBindDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserBindDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserBindDataRequest) ProtoMessage() {}

func (x *DeleteUserBindDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserBindDataRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserBindDataRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteUserBindDataRequest) GetSendBody() *DeleteUserBindDataRequest_SendBody {
	if x != nil {
		return x.SendBody
	}
	return nil
}

type DeleteUserBindDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Res bool   `protobuf:"varint,2,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *DeleteUserBindDataReply) Reset() {
	*x = DeleteUserBindDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserBindDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserBindDataReply) ProtoMessage() {}

func (x *DeleteUserBindDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserBindDataReply.ProtoReflect.Descriptor instead.
func (*DeleteUserBindDataReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{49}
}

func (x *DeleteUserBindDataReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeleteUserBindDataReply) GetRes() bool {
	if x != nil {
		return x.Res
	}
	return false
}

type HandlePRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HandlePRequest) Reset() {
	*x = HandlePRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlePRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlePRequest) ProtoMessage() {}

func (x *HandlePRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlePRequest.ProtoReflect.Descriptor instead.
func (*HandlePRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{50}
}

type HandlePReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HandlePReply) Reset() {
	*x = HandlePReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandlePReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandlePReply) ProtoMessage() {}

func (x *HandlePReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandlePReply.ProtoReflect.Descriptor instead.
func (*HandlePReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{51}
}

type GetUserAndTraderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserAndTraderRequest) Reset() {
	*x = GetUserAndTraderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAndTraderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAndTraderRequest) ProtoMessage() {}

func (x *GetUserAndTraderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAndTraderRequest.ProtoReflect.Descriptor instead.
func (*GetUserAndTraderRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{52}
}

type GetUserAndTraderReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetUserAndTraderReply_DataList `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetUserAndTraderReply) Reset() {
	*x = GetUserAndTraderReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAndTraderReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAndTraderReply) ProtoMessage() {}

func (x *GetUserAndTraderReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAndTraderReply.ProtoReflect.Descriptor instead.
func (*GetUserAndTraderReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{53}
}

func (x *GetUserAndTraderReply) GetList() []*GetUserAndTraderReply_DataList {
	if x != nil {
		return x.List
	}
	return nil
}

type GetTraderPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraderId uint64 `protobuf:"varint,1,opt,name=traderId,proto3" json:"traderId,omitempty"`
}

func (x *GetTraderPositionRequest) Reset() {
	*x = GetTraderPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraderPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraderPositionRequest) ProtoMessage() {}

func (x *GetTraderPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraderPositionRequest.ProtoReflect.Descriptor instead.
func (*GetTraderPositionRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{54}
}

func (x *GetTraderPositionRequest) GetTraderId() uint64 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

type GetTraderPositionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetTraderPositionReply_DataList `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetTraderPositionReply) Reset() {
	*x = GetTraderPositionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraderPositionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraderPositionReply) ProtoMessage() {}

func (x *GetTraderPositionReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraderPositionReply.ProtoReflect.Descriptor instead.
func (*GetTraderPositionReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{55}
}

func (x *GetTraderPositionReply) GetList() []*GetTraderPositionReply_DataList {
	if x != nil {
		return x.List
	}
	return nil
}

type GetUserPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TraderId uint64 `protobuf:"varint,2,opt,name=traderId,proto3" json:"traderId,omitempty"`
}

func (x *GetUserPositionRequest) Reset() {
	*x = GetUserPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPositionRequest) ProtoMessage() {}

func (x *GetUserPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPositionRequest.ProtoReflect.Descriptor instead.
func (*GetUserPositionRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{56}
}

func (x *GetUserPositionRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserPositionRequest) GetTraderId() uint64 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

type GetUserPositionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetUserPositionReply_DataList `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetUserPositionReply) Reset() {
	*x = GetUserPositionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPositionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPositionReply) ProtoMessage() {}

func (x *GetUserPositionReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPositionReply.ProtoReflect.Descriptor instead.
func (*GetUserPositionReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{57}
}

func (x *GetUserPositionReply) GetList() []*GetUserPositionReply_DataList {
	if x != nil {
		return x.List
	}
	return nil
}

type OpenPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendBody *OpenPositionRequest_SendBody `protobuf:"bytes,1,opt,name=send_body,json=sendBody,proto3" json:"send_body,omitempty"`
}

func (x *OpenPositionRequest) Reset() {
	*x = OpenPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPositionRequest) ProtoMessage() {}

func (x *OpenPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPositionRequest.ProtoReflect.Descriptor instead.
func (*OpenPositionRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{58}
}

func (x *OpenPositionRequest) GetSendBody() *OpenPositionRequest_SendBody {
	if x != nil {
		return x.SendBody
	}
	return nil
}

type OpenPositionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Res bool   `protobuf:"varint,2,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *OpenPositionReply) Reset() {
	*x = OpenPositionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPositionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPositionReply) ProtoMessage() {}

func (x *OpenPositionReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPositionReply.ProtoReflect.Descriptor instead.
func (*OpenPositionReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{59}
}

func (x *OpenPositionReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *OpenPositionReply) GetRes() bool {
	if x != nil {
		return x.Res
	}
	return false
}

type InitPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendBody *InitPositionRequest_SendBody `protobuf:"bytes,1,opt,name=send_body,json=sendBody,proto3" json:"send_body,omitempty"`
}

func (x *InitPositionRequest) Reset() {
	*x = InitPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPositionRequest) ProtoMessage() {}

func (x *InitPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPositionRequest.ProtoReflect.Descriptor instead.
func (*InitPositionRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{60}
}

func (x *InitPositionRequest) GetSendBody() *InitPositionRequest_SendBody {
	if x != nil {
		return x.SendBody
	}
	return nil
}

type InitPositionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Res bool   `protobuf:"varint,2,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *InitPositionReply) Reset() {
	*x = InitPositionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPositionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPositionReply) ProtoMessage() {}

func (x *InitPositionReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPositionReply.ProtoReflect.Descriptor instead.
func (*InitPositionReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{61}
}

func (x *InitPositionReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *InitPositionReply) GetRes() bool {
	if x != nil {
		return x.Res
	}
	return false
}

type UnbindAndClosePositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SendBody *UnbindAndClosePositionRequest_SendBody `protobuf:"bytes,1,opt,name=send_body,json=sendBody,proto3" json:"send_body,omitempty"`
}

func (x *UnbindAndClosePositionRequest) Reset() {
	*x = UnbindAndClosePositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbindAndClosePositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindAndClosePositionRequest) ProtoMessage() {}

func (x *UnbindAndClosePositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindAndClosePositionRequest.ProtoReflect.Descriptor instead.
func (*UnbindAndClosePositionRequest) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{62}
}

func (x *UnbindAndClosePositionRequest) GetSendBody() *UnbindAndClosePositionRequest_SendBody {
	if x != nil {
		return x.SendBody
	}
	return nil
}

type UnbindAndClosePositionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Res bool   `protobuf:"varint,2,opt,name=res,proto3" json:"res,omitempty"`
}

func (x *UnbindAndClosePositionReply) Reset() {
	*x = UnbindAndClosePositionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbindAndClosePositionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindAndClosePositionReply) ProtoMessage() {}

func (x *UnbindAndClosePositionReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindAndClosePositionReply.ProtoReflect.Descriptor instead.
func (*UnbindAndClosePositionReply) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{63}
}

func (x *UnbindAndClosePositionReply) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *UnbindAndClosePositionReply) GetRes() bool {
	if x != nil {
		return x.Res
	}
	return false
}

type ListenTraderAndUserOrderRequest_SendBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orders    []*ListenTraderAndUserOrderRequest_SendBody_Order `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	Last      string                                            `protobuf:"bytes,2,opt,name=last,proto3" json:"last,omitempty"`
	InitOrder uint64                                            `protobuf:"varint,4,opt,name=init_order,json=initOrder,proto3" json:"init_order,omitempty"`
}

func (x *ListenTraderAndUserOrderRequest_SendBody) Reset() {
	*x = ListenTraderAndUserOrderRequest_SendBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenTraderAndUserOrderRequest_SendBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTraderAndUserOrderRequest_SendBody) ProtoMessage() {}

func (x *ListenTraderAndUserOrderRequest_SendBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTraderAndUserOrderRequest_SendBody.ProtoReflect.Descriptor instead.
func (*ListenTraderAndUserOrderRequest_SendBody) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{24, 0}
}

func (x *ListenTraderAndUserOrderRequest_SendBody) GetOrders() []*ListenTraderAndUserOrderRequest_SendBody_Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *ListenTraderAndUserOrderRequest_SendBody) GetLast() string {
	if x != nil {
		return x.Last
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody) GetInitOrder() uint64 {
	if x != nil {
		return x.InitOrder
	}
	return 0
}

type ListenTraderAndUserOrderRequest_SendBody_Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid       uint64                                                 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	BaseMoney string                                                 `protobuf:"bytes,2,opt,name=base_money,json=baseMoney,proto3" json:"base_money,omitempty"`
	Data      []*ListenTraderAndUserOrderRequest_SendBody_Order_Data `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
	InitOrder uint64                                                 `protobuf:"varint,4,opt,name=init_order,json=initOrder,proto3" json:"init_order,omitempty"`
	Rate      string                                                 `protobuf:"bytes,5,opt,name=rate,proto3" json:"rate,omitempty"`
	TraderNum uint64                                                 `protobuf:"varint,6,opt,name=trader_num,json=traderNum,proto3" json:"trader_num,omitempty"`
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) Reset() {
	*x = ListenTraderAndUserOrderRequest_SendBody_Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTraderAndUserOrderRequest_SendBody_Order) ProtoMessage() {}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTraderAndUserOrderRequest_SendBody_Order.ProtoReflect.Descriptor instead.
func (*ListenTraderAndUserOrderRequest_SendBody_Order) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{24, 0, 0}
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) GetBaseMoney() string {
	if x != nil {
		return x.BaseMoney
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) GetData() []*ListenTraderAndUserOrderRequest_SendBody_Order_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) GetInitOrder() uint64 {
	if x != nil {
		return x.InitOrder
	}
	return 0
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order) GetTraderNum() uint64 {
	if x != nil {
		return x.TraderNum
	}
	return 0
}

type ListenTraderAndUserOrderRequest_SendBody_Order_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order 消息类型的字段
	Symbol     string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Type       string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Price      string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Side       string `protobuf:"bytes,4,opt,name=side,proto3" json:"side,omitempty"`
	Qty        string `protobuf:"bytes,5,opt,name=qty,proto3" json:"qty,omitempty"`
	Proportion string `protobuf:"bytes,6,opt,name=proportion,proto3" json:"proportion,omitempty"`
	Position   string `protobuf:"bytes,7,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) Reset() {
	*x = ListenTraderAndUserOrderRequest_SendBody_Order_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenTraderAndUserOrderRequest_SendBody_Order_Data) ProtoMessage() {}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenTraderAndUserOrderRequest_SendBody_Order_Data.ProtoReflect.Descriptor instead.
func (*ListenTraderAndUserOrderRequest_SendBody_Order_Data) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{24, 0, 0, 0}
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) GetProportion() string {
	if x != nil {
		return x.Proportion
	}
	return ""
}

func (x *ListenTraderAndUserOrderRequest_SendBody_Order_Data) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

type GetBinanceTraderPositionHistoryReply_Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Side       string  `protobuf:"bytes,2,opt,name=side,proto3" json:"side,omitempty"`
	ClosingPnl float64 `protobuf:"fixed64,3,opt,name=closingPnl,proto3" json:"closingPnl,omitempty"`
}

func (x *GetBinanceTraderPositionHistoryReply_Position) Reset() {
	*x = GetBinanceTraderPositionHistoryReply_Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBinanceTraderPositionHistoryReply_Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBinanceTraderPositionHistoryReply_Position) ProtoMessage() {}

func (x *GetBinanceTraderPositionHistoryReply_Position) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBinanceTraderPositionHistoryReply_Position.ProtoReflect.Descriptor instead.
func (*GetBinanceTraderPositionHistoryReply_Position) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{33, 0}
}

func (x *GetBinanceTraderPositionHistoryReply_Position) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetBinanceTraderPositionHistoryReply_Position) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *GetBinanceTraderPositionHistoryReply_Position) GetClosingPnl() float64 {
	if x != nil {
		return x.ClosingPnl
	}
	return 0
}

type GetFilDataReply_DataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To        string                      `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Value     string                      `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	CanGet    string                      `protobuf:"bytes,3,opt,name=canGet,proto3" json:"canGet,omitempty"`
	ListChild []*GetFilDataReply_DataList `protobuf:"bytes,4,rep,name=listChild,proto3" json:"listChild,omitempty"`
	Already   bool                        `protobuf:"varint,5,opt,name=already,proto3" json:"already,omitempty"`
}

func (x *GetFilDataReply_DataList) Reset() {
	*x = GetFilDataReply_DataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFilDataReply_DataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFilDataReply_DataList) ProtoMessage() {}

func (x *GetFilDataReply_DataList) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFilDataReply_DataList.ProtoReflect.Descriptor instead.
func (*GetFilDataReply_DataList) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{40, 0}
}

func (x *GetFilDataReply_DataList) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *GetFilDataReply_DataList) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *GetFilDataReply_DataList) GetCanGet() string {
	if x != nil {
		return x.CanGet
	}
	return ""
}

func (x *GetFilDataReply_DataList) GetListChild() []*GetFilDataReply_DataList {
	if x != nil {
		return x.ListChild
	}
	return nil
}

func (x *GetFilDataReply_DataList) GetAlready() bool {
	if x != nil {
		return x.Already
	}
	return false
}

type GetBinanceTradersTradeReply_DataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time         uint64  `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	CreatedAt    string  `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Symbol       string  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Side         string  `protobuf:"bytes,3,opt,name=side,proto3" json:"side,omitempty"`
	PositionSide string  `protobuf:"bytes,4,opt,name=position_side,json=positionSide,proto3" json:"position_side,omitempty"`
	Qty          float64 `protobuf:"fixed64,7,opt,name=qty,proto3" json:"qty,omitempty"`
}

func (x *GetBinanceTradersTradeReply_DataList) Reset() {
	*x = GetBinanceTradersTradeReply_DataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBinanceTradersTradeReply_DataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBinanceTradersTradeReply_DataList) ProtoMessage() {}

func (x *GetBinanceTradersTradeReply_DataList) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBinanceTradersTradeReply_DataList.ProtoReflect.Descriptor instead.
func (*GetBinanceTradersTradeReply_DataList) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{42, 0}
}

func (x *GetBinanceTradersTradeReply_DataList) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *GetBinanceTradersTradeReply_DataList) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *GetBinanceTradersTradeReply_DataList) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetBinanceTradersTradeReply_DataList) GetSide() string {
	if x != nil {
		return x.Side
	}
	return ""
}

func (x *GetBinanceTradersTradeReply_DataList) GetPositionSide() string {
	if x != nil {
		return x.PositionSide
	}
	return ""
}

func (x *GetBinanceTradersTradeReply_DataList) GetQty() float64 {
	if x != nil {
		return x.Qty
	}
	return 0
}

type GetUserBindDataReply_DataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     uint64 `protobuf:"varint,6,opt,name=userId,proto3" json:"userId,omitempty"`
	Address    string `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Amount     uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	TraderNum  string `protobuf:"bytes,3,opt,name=traderNum,proto3" json:"traderNum,omitempty"`
	TraderName string `protobuf:"bytes,4,opt,name=traderName,proto3" json:"traderName,omitempty"`
}

func (x *GetUserBindDataReply_DataList) Reset() {
	*x = GetUserBindDataReply_DataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBindDataReply_DataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBindDataReply_DataList) ProtoMessage() {}

func (x *GetUserBindDataReply_DataList) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBindDataReply_DataList.ProtoReflect.Descriptor instead.
func (*GetUserBindDataReply_DataList) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{44, 0}
}

func (x *GetUserBindDataReply_DataList) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetUserBindDataReply_DataList) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserBindDataReply_DataList) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetUserBindDataReply_DataList) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetUserBindDataReply_DataList) GetTraderNum() string {
	if x != nil {
		return x.TraderNum
	}
	return ""
}

func (x *GetUserBindDataReply_DataList) GetTraderName() string {
	if x != nil {
		return x.TraderName
	}
	return ""
}

type InsertUserBindDataRequest_SendBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraderNum string `protobuf:"bytes,2,opt,name=trader_num,json=traderNum,proto3" json:"trader_num,omitempty"`
	Amount    uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Address   string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *InsertUserBindDataRequest_SendBody) Reset() {
	*x = InsertUserBindDataRequest_SendBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertUserBindDataRequest_SendBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertUserBindDataRequest_SendBody) ProtoMessage() {}

func (x *InsertUserBindDataRequest_SendBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertUserBindDataRequest_SendBody.ProtoReflect.Descriptor instead.
func (*InsertUserBindDataRequest_SendBody) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{46, 0}
}

func (x *InsertUserBindDataRequest_SendBody) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InsertUserBindDataRequest_SendBody) GetTraderNum() string {
	if x != nil {
		return x.TraderNum
	}
	return ""
}

func (x *InsertUserBindDataRequest_SendBody) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *InsertUserBindDataRequest_SendBody) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type DeleteUserBindDataRequest_SendBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteUserBindDataRequest_SendBody) Reset() {
	*x = DeleteUserBindDataRequest_SendBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserBindDataRequest_SendBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserBindDataRequest_SendBody) ProtoMessage() {}

func (x *DeleteUserBindDataRequest_SendBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserBindDataRequest_SendBody.ProtoReflect.Descriptor instead.
func (*DeleteUserBindDataRequest_SendBody) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{48, 0}
}

func (x *DeleteUserBindDataRequest_SendBody) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetUserAndTraderReply_DataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     uint64                                      `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Address    string                                      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	ApiKey     string                                      `protobuf:"bytes,3,opt,name=apiKey,proto3" json:"apiKey,omitempty"`
	ApiSecret  string                                      `protobuf:"bytes,4,opt,name=apiSecret,proto3" json:"apiSecret,omitempty"`
	ApiStatus  uint64                                      `protobuf:"varint,5,opt,name=apiStatus,proto3" json:"apiStatus,omitempty"`
	TraderList []*GetUserAndTraderReply_DataBindTraderList `protobuf:"bytes,6,rep,name=traderList,proto3" json:"traderList,omitempty"`
}

func (x *GetUserAndTraderReply_DataList) Reset() {
	*x = GetUserAndTraderReply_DataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAndTraderReply_DataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAndTraderReply_DataList) ProtoMessage() {}

func (x *GetUserAndTraderReply_DataList) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAndTraderReply_DataList.ProtoReflect.Descriptor instead.
func (*GetUserAndTraderReply_DataList) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{53, 0}
}

func (x *GetUserAndTraderReply_DataList) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserAndTraderReply_DataList) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetUserAndTraderReply_DataList) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *GetUserAndTraderReply_DataList) GetApiSecret() string {
	if x != nil {
		return x.ApiSecret
	}
	return ""
}

func (x *GetUserAndTraderReply_DataList) GetApiStatus() uint64 {
	if x != nil {
		return x.ApiStatus
	}
	return 0
}

func (x *GetUserAndTraderReply_DataList) GetTraderList() []*GetUserAndTraderReply_DataBindTraderList {
	if x != nil {
		return x.TraderList
	}
	return nil
}

type GetUserAndTraderReply_DataBindTraderList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	TraderId   uint64 `protobuf:"varint,1,opt,name=traderId,proto3" json:"traderId,omitempty"`
	TraderNum  uint64 `protobuf:"varint,2,opt,name=traderNum,proto3" json:"traderNum,omitempty"`
	TraderName string `protobuf:"bytes,5,opt,name=traderName,proto3" json:"traderName,omitempty"`
	InitOrder  uint64 `protobuf:"varint,6,opt,name=initOrder,proto3" json:"initOrder,omitempty"`
	Amount     uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Status     uint64 `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetUserAndTraderReply_DataBindTraderList) Reset() {
	*x = GetUserAndTraderReply_DataBindTraderList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAndTraderReply_DataBindTraderList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAndTraderReply_DataBindTraderList) ProtoMessage() {}

func (x *GetUserAndTraderReply_DataBindTraderList) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAndTraderReply_DataBindTraderList.ProtoReflect.Descriptor instead.
func (*GetUserAndTraderReply_DataBindTraderList) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{53, 1}
}

func (x *GetUserAndTraderReply_DataBindTraderList) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetUserAndTraderReply_DataBindTraderList) GetTraderId() uint64 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

func (x *GetUserAndTraderReply_DataBindTraderList) GetTraderNum() uint64 {
	if x != nil {
		return x.TraderNum
	}
	return 0
}

func (x *GetUserAndTraderReply_DataBindTraderList) GetTraderName() string {
	if x != nil {
		return x.TraderName
	}
	return ""
}

func (x *GetUserAndTraderReply_DataBindTraderList) GetInitOrder() uint64 {
	if x != nil {
		return x.InitOrder
	}
	return 0
}

func (x *GetUserAndTraderReply_DataBindTraderList) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetUserAndTraderReply_DataBindTraderList) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetTraderPositionReply_DataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           uint64  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Symbol       string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Amount       float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	PositionSide string  `protobuf:"bytes,3,opt,name=positionSide,proto3" json:"positionSide,omitempty"`
}

func (x *GetTraderPositionReply_DataList) Reset() {
	*x = GetTraderPositionReply_DataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTraderPositionReply_DataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTraderPositionReply_DataList) ProtoMessage() {}

func (x *GetTraderPositionReply_DataList) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTraderPositionReply_DataList.ProtoReflect.Descriptor instead.
func (*GetTraderPositionReply_DataList) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{55, 0}
}

func (x *GetTraderPositionReply_DataList) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetTraderPositionReply_DataList) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetTraderPositionReply_DataList) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetTraderPositionReply_DataList) GetPositionSide() string {
	if x != nil {
		return x.PositionSide
	}
	return ""
}

type GetUserPositionReply_DataList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol       string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Amount       float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
	PositionSide string  `protobuf:"bytes,3,opt,name=positionSide,proto3" json:"positionSide,omitempty"`
}

func (x *GetUserPositionReply_DataList) Reset() {
	*x = GetUserPositionReply_DataList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserPositionReply_DataList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserPositionReply_DataList) ProtoMessage() {}

func (x *GetUserPositionReply_DataList) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserPositionReply_DataList.ProtoReflect.Descriptor instead.
func (*GetUserPositionReply_DataList) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{57, 0}
}

func (x *GetUserPositionReply_DataList) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetUserPositionReply_DataList) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GetUserPositionReply_DataList) GetPositionSide() string {
	if x != nil {
		return x.PositionSide
	}
	return ""
}

type OpenPositionRequest_SendBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BindId        uint64  `protobuf:"varint,1,opt,name=bindId,proto3" json:"bindId,omitempty"`
	PositionId    uint64  `protobuf:"varint,2,opt,name=positionId,proto3" json:"positionId,omitempty"`       // 指定仓位
	Amount        float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`              // 金额
	UseSystemInit bool    `protobuf:"varint,4,opt,name=useSystemInit,proto3" json:"useSystemInit,omitempty"` // 系统初始化
}

func (x *OpenPositionRequest_SendBody) Reset() {
	*x = OpenPositionRequest_SendBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenPositionRequest_SendBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenPositionRequest_SendBody) ProtoMessage() {}

func (x *OpenPositionRequest_SendBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenPositionRequest_SendBody.ProtoReflect.Descriptor instead.
func (*OpenPositionRequest_SendBody) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{58, 0}
}

func (x *OpenPositionRequest_SendBody) GetBindId() uint64 {
	if x != nil {
		return x.BindId
	}
	return 0
}

func (x *OpenPositionRequest_SendBody) GetPositionId() uint64 {
	if x != nil {
		return x.PositionId
	}
	return 0
}

func (x *OpenPositionRequest_SendBody) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OpenPositionRequest_SendBody) GetUseSystemInit() bool {
	if x != nil {
		return x.UseSystemInit
	}
	return false
}

type InitPositionRequest_SendBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TraderId uint64 `protobuf:"varint,2,opt,name=traderId,proto3" json:"traderId,omitempty"`
}

func (x *InitPositionRequest_SendBody) Reset() {
	*x = InitPositionRequest_SendBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitPositionRequest_SendBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitPositionRequest_SendBody) ProtoMessage() {}

func (x *InitPositionRequest_SendBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitPositionRequest_SendBody.ProtoReflect.Descriptor instead.
func (*InitPositionRequest_SendBody) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{60, 0}
}

func (x *InitPositionRequest_SendBody) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *InitPositionRequest_SendBody) GetTraderId() uint64 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

type UnbindAndClosePositionRequest_SendBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   uint64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	TraderId uint64 `protobuf:"varint,2,opt,name=traderId,proto3" json:"traderId,omitempty"`
}

func (x *UnbindAndClosePositionRequest_SendBody) Reset() {
	*x = UnbindAndClosePositionRequest_SendBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbindAndClosePositionRequest_SendBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbindAndClosePositionRequest_SendBody) ProtoMessage() {}

func (x *UnbindAndClosePositionRequest_SendBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbindAndClosePositionRequest_SendBody.ProtoReflect.Descriptor instead.
func (*UnbindAndClosePositionRequest_SendBody) Descriptor() ([]byte, []int) {
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP(), []int{62, 0}
}

func (x *UnbindAndClosePositionRequest_SendBody) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UnbindAndClosePositionRequest_SendBody) GetTraderId() uint64 {
	if x != nil {
		return x.TraderId
	}
	return 0
}

var File_api_binanceexchange_user_v1_binanceexchange_user_proto protoreflect.FileDescriptor

var file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDesc = []byte{
	0x0a, 0x36, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x66, 0x69, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x66,
	0x69, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x66, 0x69, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x66, 0x69, 0x22,
	0x18, 0x0a, 0x16, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x50, 0x75, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x1f, 0x0a, 0x1d, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x73, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x73, 0x63, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x13, 0x0a, 0x11, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1b, 0x0a, 0x19, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1b, 0x0a,
	0x19, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x4f, 0x76,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xa4, 0x01, 0x0a, 0x1e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x42, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x22, 0x1e, 0x0a, 0x1c,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x77,
	0x6f, 0x42, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x64, 0x0a, 0x14,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x77, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x22, 0x14, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x54, 0x77, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x60, 0x0a, 0x1b, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x1b, 0x0a, 0x19, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x14, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a,
	0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0xf6, 0x04, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x8a, 0x04,
	0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x47, 0x0a, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x69,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x81, 0x03, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x69, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x1a, 0xaa, 0x01,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x71, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x1d, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x6f, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x19, 0x0a, 0x17, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x6f, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x0a, 0x1b, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x4f, 0x70,
	0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x20, 0x0a, 0x1e, 0x50, 0x75, 0x6c, 0x6c, 0x42,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x50, 0x75, 0x6c,
	0x6c, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x38, 0x0a, 0x26, 0x47, 0x65, 0x74,
	0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x09,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x77, 0x69, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x4c, 0x6f, 0x73, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x4c, 0x6f,
	0x73, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x56, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6e, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x6e, 0x6c,
	0x22, 0x12, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0xf2, 0x03, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69,
	0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x54, 0x77, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x54, 0x77, 0x6f, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x77, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x54, 0x77, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x77, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x77, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x54, 0x77, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x54, 0x77, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x77, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x54, 0x77, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x69, 0x64, 0x65, 0x54, 0x77, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x69, 0x64, 0x65, 0x54, 0x77, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x77, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x54, 0x77, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x4f, 0x70, 0x65, 0x6e, 0x54, 0x77, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x77, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x65, 0x64, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x72, 0x65, 0x64, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x64, 0x6f, 0x4e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x72, 0x65, 0x64, 0x6f, 0x4e, 0x75, 0x6d, 0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x50, 0x75, 0x6c,
	0x6c, 0x46, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2e, 0x0a,
	0x12, 0x50, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xde, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x1a, 0x9b, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x47, 0x65, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x47, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x6c,
	0x69, 0x73, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x22, 0x2d,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xfb, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xa0, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x71, 0x74, 0x79, 0x22, 0x3d, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x22, 0xef, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0xa2, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x18, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x19, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x74, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3d, 0x0a, 0x17,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x79, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x1a, 0x0a, 0x08, 0x53, 0x65,
	0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xf9, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x1a, 0xdb, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x69,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x70, 0x69, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0xcc, 0x01, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x36,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x34, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x6e, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x22, 0x4c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x32,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x1a, 0x5e, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x64, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x80, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x69, 0x74, 0x22, 0x37, 0x0a, 0x11, 0x4f, 0x70, 0x65,
	0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72,
	0x65, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x3e, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x11, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22,
	0xa5, 0x01, 0x0a, 0x1d, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x44, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x3e, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x41, 0x0a, 0x1b, 0x55, 0x6e, 0x62, 0x69, 0x6e,
	0x64, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x65, 0x73, 0x32, 0x9e, 0x2d, 0x0a, 0x0b, 0x42,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x76, 0x0a, 0x0f, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x17, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e,
	0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x79, 0x0a, 0x10, 0x50, 0x75, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x32, 0x12, 0x17, 0x2e,
	0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x35, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x32, 0x12, 0x93, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x73, 0x63, 0x12,
	0x1e, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x73, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x42, 0x73, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x62, 0x73, 0x63, 0x12, 0x61, 0x0a, 0x0a, 0x42, 0x69,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x42,
	0x69, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x9f, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x41, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x22, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0xa6, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x12,
	0x20, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x41, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x3a, 0x01, 0x2a, 0x22, 0x3a, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x65, 0x77, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x65, 0x77, 0x12, 0x20, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x46, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x40, 0x3a, 0x01, 0x2a, 0x22, 0x3b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x65, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x6c, 0x0a, 0x0e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x77, 0x6f, 0x12, 0x13,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x77, 0x6f, 0x12, 0x54, 0x0a, 0x07, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x0f, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x12, 0x87, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x12, 0x30, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x8e, 0x01, 0x0a, 0x16, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69,
	0x6e, 0x64, 0x54, 0x77, 0x6f, 0x12, 0x1b, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x66, 0x69, 0x12, 0x83, 0x01, 0x0a, 0x12,
	0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x12, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x77, 0x6f, 0x12, 0x1a, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x66, 0x69, 0x12, 0x91,
	0x01, 0x0a, 0x18, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x77, 0x6f, 0x4e, 0x65, 0x77, 0x12, 0x1a, 0x2e, 0x49, 0x6e,
	0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x12, 0x37, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x66, 0x69, 0x5f, 0x6e,
	0x65, 0x77, 0x12, 0x75, 0x0a, 0x0c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1a, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x12, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x12, 0x4f, 0x76,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x4f,
	0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x12,
	0x8a, 0x01, 0x0a, 0x15, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x77, 0x6f, 0x12, 0x1a, 0x2e, 0x4f, 0x76, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x74, 0x66, 0x69, 0x12, 0x8e, 0x01, 0x0a,
	0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x12, 0x95, 0x01,
	0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x54, 0x77, 0x6f, 0x12, 0x1a, 0x2e, 0x4f,
	0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x5f, 0x74, 0x66, 0x69, 0x12, 0x99, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x42, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x77, 0x6f, 0x42, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x77, 0x6f, 0x42, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x38, 0x12, 0x36, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x77, 0x6f, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x12, 0x6e, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54,
	0x77, 0x6f, 0x12, 0x15, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54,
	0x77, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x54, 0x77, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x31,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x77,
	0x6f, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x41, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x41, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x72, 0x41, 0x67, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x12,
	0x83, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42,
	0x6f, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1a, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x6f, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x37, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78,
	0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1c,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f,
	0x78, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x4f,
	0x70, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33,
	0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x12, 0x97, 0x01, 0x0a, 0x17, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1f, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0xb1, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3f, 0x12, 0x3d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x67, 0x65,
	0x74, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x66, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f,
	0x12, 0x13, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x12, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x12, 0x6d, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x54, 0x77, 0x6f, 0x12, 0x13, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x11, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x6f, 0x5f, 0x74, 0x77, 0x6f, 0x12, 0x94, 0x01, 0x0a, 0x16, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x6f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x64, 0x6f, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x66, 0x0a, 0x0b, 0x50, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x13,
	0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x50, 0x75, 0x6c, 0x6c, 0x46, 0x69, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x66,
	0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x67,
	0x65, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x77, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x94, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x1e, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x36, 0x12, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x8e, 0x01, 0x0a, 0x12,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3c,
	0x3a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x2f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x8e, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x69, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x42, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x3c, 0x3a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x2f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55, 0x0a,
	0x07, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x12, 0x0f, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x50, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x12, 0x22, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x5f, 0x70, 0x12, 0x7b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x67, 0x65,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x7f, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x67, 0x65,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x77, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x75, 0x0a, 0x0c, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x09, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x75, 0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x35, 0x3a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22,
	0x28, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x9f, 0x01, 0x0a, 0x16, 0x55, 0x6e,
	0x62, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x55, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x6e, 0x64,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x09, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x34, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x2f, 0x75, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x4b, 0x0a, 0x12, 0x61,
	0x70, 0x69, 0x2e, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x50, 0x01, 0x5a, 0x33, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescOnce sync.Once
	file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescData = file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDesc
)

func file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescGZIP() []byte {
	file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescOnce.Do(func() {
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescData)
	})
	return file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDescData
}

var file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_api_binanceexchange_user_v1_binanceexchange_user_proto_goTypes = []interface{}{
	(*GetUserRequest)(nil),                                      // 0: GetUserRequest
	(*GetUserReply)(nil),                                        // 1: GetUserReply
	(*PullUserDepositRequest)(nil),                              // 2: PullUserDepositRequest
	(*PullUserDepositReply)(nil),                                // 3: PullUserDepositReply
	(*PullUserCredentialsBscRequest)(nil),                       // 4: PullUserCredentialsBscRequest
	(*PullUserCredentialsBscReply)(nil),                         // 5: PullUserCredentialsBscReply
	(*BindTraderRequest)(nil),                                   // 6: BindTraderRequest
	(*BindTraderReply)(nil),                                     // 7: BindTraderReply
	(*AnalyzeRequest)(nil),                                      // 8: AnalyzeRequest
	(*AnalyzeReply)(nil),                                        // 9: AnalyzeReply
	(*CloseOrderAfterBindRequest)(nil),                          // 10: CloseOrderAfterBindRequest
	(*CloseOrderAfterBindReply)(nil),                            // 11: CloseOrderAfterBindReply
	(*InitOrderAfterBindRequest)(nil),                           // 12: InitOrderAfterBindRequest
	(*InitOrderAfterBindReply)(nil),                             // 13: InitOrderAfterBindReply
	(*OverOrderAfterBindRequest)(nil),                           // 14: OverOrderAfterBindRequest
	(*OverOrderAfterBindReply)(nil),                             // 15: OverOrderAfterBindReply
	(*AdminOverOrderTwoByInfoRequest)(nil),                      // 16: AdminOverOrderTwoByInfoRequest
	(*AdminOverOrderTwoByInfoReply)(nil),                        // 17: AdminOverOrderTwoByInfoReply
	(*OrderAdminTwoRequest)(nil),                                // 18: OrderAdminTwoRequest
	(*OrderAdminTwoReply)(nil),                                  // 19: OrderAdminTwoReply
	(*ExchangeUserLeverAgeRequest)(nil),                         // 20: ExchangeUserLeverAgeRequest
	(*ExchangeUserLeverAgeReply)(nil),                           // 21: ExchangeUserLeverAgeReply
	(*OrderHandleRequest)(nil),                                  // 22: OrderHandleRequest
	(*OrderHandleReply)(nil),                                    // 23: OrderHandleReply
	(*ListenTraderAndUserOrderRequest)(nil),                     // 24: ListenTraderAndUserOrderRequest
	(*ListenTraderAndUserOrderReply)(nil),                       // 25: ListenTraderAndUserOrderReply
	(*PullTradingBoxOpenRequest)(nil),                           // 26: PullTradingBoxOpenRequest
	(*PullTradingBoxOpenReply)(nil),                             // 27: PullTradingBoxOpenReply
	(*SettleTradingBoxOpenRequest)(nil),                         // 28: SettleTradingBoxOpenRequest
	(*SettleTradingBoxOpenReply)(nil),                           // 29: SettleTradingBoxOpenReply
	(*PullBinanceTradeHistoryRequest)(nil),                      // 30: PullBinanceTradeHistoryRequest
	(*PullBinanceTradeHistoryReply)(nil),                        // 31: PullBinanceTradeHistoryReply
	(*GetBinanceTraderPositionHistoryRequest)(nil),              // 32: GetBinanceTraderPositionHistoryRequest
	(*GetBinanceTraderPositionHistoryReply)(nil),                // 33: GetBinanceTraderPositionHistoryReply
	(*UserOrderDoReply)(nil),                                    // 34: UserOrderDoReply
	(*UserOrderDoRequest)(nil),                                  // 35: UserOrderDoRequest
	(*UserOrderDoHandlePriceReply)(nil),                         // 36: UserOrderDoHandlePriceReply
	(*UserOrderDoHandlePriceRequest)(nil),                       // 37: UserOrderDoHandlePriceRequest
	(*PullFilDataReply)(nil),                                    // 38: PullFilDataReply
	(*PullFilDataRequest)(nil),                                  // 39: PullFilDataRequest
	(*GetFilDataReply)(nil),                                     // 40: GetFilDataReply
	(*GetFilDataRequest)(nil),                                   // 41: GetFilDataRequest
	(*GetBinanceTradersTradeReply)(nil),                         // 42: GetBinanceTradersTradeReply
	(*GetBinanceTradersTradeRequest)(nil),                       // 43: GetBinanceTradersTradeRequest
	(*GetUserBindDataReply)(nil),                                // 44: GetUserBindDataReply
	(*GetUserBindDataRequest)(nil),                              // 45: GetUserBindDataRequest
	(*InsertUserBindDataRequest)(nil),                           // 46: InsertUserBindDataRequest
	(*InsertUserBindDataReply)(nil),                             // 47: InsertUserBindDataReply
	(*DeleteUserBindDataRequest)(nil),                           // 48: DeleteUserBindDataRequest
	(*DeleteUserBindDataReply)(nil),                             // 49: DeleteUserBindDataReply
	(*HandlePRequest)(nil),                                      // 50: HandlePRequest
	(*HandlePReply)(nil),                                        // 51: HandlePReply
	(*GetUserAndTraderRequest)(nil),                             // 52: GetUserAndTraderRequest
	(*GetUserAndTraderReply)(nil),                               // 53: GetUserAndTraderReply
	(*GetTraderPositionRequest)(nil),                            // 54: GetTraderPositionRequest
	(*GetTraderPositionReply)(nil),                              // 55: GetTraderPositionReply
	(*GetUserPositionRequest)(nil),                              // 56: GetUserPositionRequest
	(*GetUserPositionReply)(nil),                                // 57: GetUserPositionReply
	(*OpenPositionRequest)(nil),                                 // 58: OpenPositionRequest
	(*OpenPositionReply)(nil),                                   // 59: OpenPositionReply
	(*InitPositionRequest)(nil),                                 // 60: InitPositionRequest
	(*InitPositionReply)(nil),                                   // 61: InitPositionReply
	(*UnbindAndClosePositionRequest)(nil),                       // 62: UnbindAndClosePositionRequest
	(*UnbindAndClosePositionReply)(nil),                         // 63: UnbindAndClosePositionReply
	(*ListenTraderAndUserOrderRequest_SendBody)(nil),            // 64: ListenTraderAndUserOrderRequest.SendBody
	(*ListenTraderAndUserOrderRequest_SendBody_Order)(nil),      // 65: ListenTraderAndUserOrderRequest.SendBody.Order
	(*ListenTraderAndUserOrderRequest_SendBody_Order_Data)(nil), // 66: ListenTraderAndUserOrderRequest.SendBody.Order.Data
	(*GetBinanceTraderPositionHistoryReply_Position)(nil),       // 67: GetBinanceTraderPositionHistoryReply.Position
	(*GetFilDataReply_DataList)(nil),                            // 68: GetFilDataReply.DataList
	(*GetBinanceTradersTradeReply_DataList)(nil),                // 69: GetBinanceTradersTradeReply.DataList
	(*GetUserBindDataReply_DataList)(nil),                       // 70: GetUserBindDataReply.DataList
	(*InsertUserBindDataRequest_SendBody)(nil),                  // 71: InsertUserBindDataRequest.SendBody
	(*DeleteUserBindDataRequest_SendBody)(nil),                  // 72: DeleteUserBindDataRequest.SendBody
	(*GetUserAndTraderReply_DataList)(nil),                      // 73: GetUserAndTraderReply.DataList
	(*GetUserAndTraderReply_DataBindTraderList)(nil),            // 74: GetUserAndTraderReply.DataBindTraderList
	(*GetTraderPositionReply_DataList)(nil),                     // 75: GetTraderPositionReply.DataList
	(*GetUserPositionReply_DataList)(nil),                       // 76: GetUserPositionReply.DataList
	(*OpenPositionRequest_SendBody)(nil),                        // 77: OpenPositionRequest.SendBody
	(*InitPositionRequest_SendBody)(nil),                        // 78: InitPositionRequest.SendBody
	(*UnbindAndClosePositionRequest_SendBody)(nil),              // 79: UnbindAndClosePositionRequest.SendBody
}
var file_api_binanceexchange_user_v1_binanceexchange_user_proto_depIdxs = []int32{
	64, // 0: ListenTraderAndUserOrderRequest.send_body:type_name -> ListenTraderAndUserOrderRequest.SendBody
	67, // 1: GetBinanceTraderPositionHistoryReply.positions:type_name -> GetBinanceTraderPositionHistoryReply.Position
	68, // 2: GetFilDataReply.list:type_name -> GetFilDataReply.DataList
	69, // 3: GetBinanceTradersTradeReply.list:type_name -> GetBinanceTradersTradeReply.DataList
	70, // 4: GetUserBindDataReply.list:type_name -> GetUserBindDataReply.DataList
	71, // 5: InsertUserBindDataRequest.send_body:type_name -> InsertUserBindDataRequest.SendBody
	72, // 6: DeleteUserBindDataRequest.send_body:type_name -> DeleteUserBindDataRequest.SendBody
	73, // 7: GetUserAndTraderReply.list:type_name -> GetUserAndTraderReply.DataList
	75, // 8: GetTraderPositionReply.list:type_name -> GetTraderPositionReply.DataList
	76, // 9: GetUserPositionReply.list:type_name -> GetUserPositionReply.DataList
	77, // 10: OpenPositionRequest.send_body:type_name -> OpenPositionRequest.SendBody
	78, // 11: InitPositionRequest.send_body:type_name -> InitPositionRequest.SendBody
	79, // 12: UnbindAndClosePositionRequest.send_body:type_name -> UnbindAndClosePositionRequest.SendBody
	65, // 13: ListenTraderAndUserOrderRequest.SendBody.orders:type_name -> ListenTraderAndUserOrderRequest.SendBody.Order
	66, // 14: ListenTraderAndUserOrderRequest.SendBody.Order.data:type_name -> ListenTraderAndUserOrderRequest.SendBody.Order.Data
	68, // 15: GetFilDataReply.DataList.listChild:type_name -> GetFilDataReply.DataList
	74, // 16: GetUserAndTraderReply.DataList.traderList:type_name -> GetUserAndTraderReply.DataBindTraderList
	0,  // 17: BinanceUser.GetUser:input_type -> GetUserRequest
	2,  // 18: BinanceUser.PullUserDeposit:input_type -> PullUserDepositRequest
	2,  // 19: BinanceUser.PullUserDeposit2:input_type -> PullUserDepositRequest
	4,  // 20: BinanceUser.PullUserCredentialsBsc:input_type -> PullUserCredentialsBscRequest
	6,  // 21: BinanceUser.BindTrader:input_type -> BindTraderRequest
	24, // 22: BinanceUser.ListenTraderAndUserOrder:input_type -> ListenTraderAndUserOrderRequest
	24, // 23: BinanceUser.ListenTraderAndUserOrderNew:input_type -> ListenTraderAndUserOrderRequest
	24, // 24: BinanceUser.ListenOrderNew:input_type -> ListenTraderAndUserOrderRequest
	22, // 25: BinanceUser.OrderHandle:input_type -> OrderHandleRequest
	22, // 26: BinanceUser.OrderHandleTwo:input_type -> OrderHandleRequest
	8,  // 27: BinanceUser.Analyze:input_type -> AnalyzeRequest
	10, // 28: BinanceUser.CloseOrderAfterBind:input_type -> CloseOrderAfterBindRequest
	10, // 29: BinanceUser.CloseOrderAfterBindTwo:input_type -> CloseOrderAfterBindRequest
	12, // 30: BinanceUser.InitOrderAfterBind:input_type -> InitOrderAfterBindRequest
	12, // 31: BinanceUser.InitOrderAfterBindTwo:input_type -> InitOrderAfterBindRequest
	12, // 32: BinanceUser.InitOrderAfterBindTwoNew:input_type -> InitOrderAfterBindRequest
	14, // 33: BinanceUser.HandleChange:input_type -> OverOrderAfterBindRequest
	14, // 34: BinanceUser.OverOrderAfterBind:input_type -> OverOrderAfterBindRequest
	14, // 35: BinanceUser.OverOrderAfterBindTwo:input_type -> OverOrderAfterBindRequest
	14, // 36: BinanceUser.AdminOverOrderAfterBind:input_type -> OverOrderAfterBindRequest
	14, // 37: BinanceUser.AdminOverOrderAfterBindTwo:input_type -> OverOrderAfterBindRequest
	16, // 38: BinanceUser.AdminOverOrderTwoByInfo:input_type -> AdminOverOrderTwoByInfoRequest
	18, // 39: BinanceUser.OrderAdminTwo:input_type -> OrderAdminTwoRequest
	20, // 40: BinanceUser.ExchangeUserLeverAge:input_type -> ExchangeUserLeverAgeRequest
	26, // 41: BinanceUser.PullTradingBoxOpen:input_type -> PullTradingBoxOpenRequest
	28, // 42: BinanceUser.SettleTradingBoxOpen:input_type -> SettleTradingBoxOpenRequest
	30, // 43: BinanceUser.PullBinanceTradeHistory:input_type -> PullBinanceTradeHistoryRequest
	32, // 44: BinanceUser.GetBinanceTraderPosition:input_type -> GetBinanceTraderPositionHistoryRequest
	35, // 45: BinanceUser.UserOrderDo:input_type -> UserOrderDoRequest
	35, // 46: BinanceUser.UserOrderDoTwo:input_type -> UserOrderDoRequest
	37, // 47: BinanceUser.UserOrderDoHandlePrice:input_type -> UserOrderDoHandlePriceRequest
	39, // 48: BinanceUser.PullFilData:input_type -> PullFilDataRequest
	41, // 49: BinanceUser.GetFilData:input_type -> GetFilDataRequest
	45, // 50: BinanceUser.GetUserBindData:input_type -> GetUserBindDataRequest
	43, // 51: BinanceUser.GetBinanceTradersTrade:input_type -> GetBinanceTradersTradeRequest
	46, // 52: BinanceUser.InsertUserBindData:input_type -> InsertUserBindDataRequest
	48, // 53: BinanceUser.DeleteUserBindData:input_type -> DeleteUserBindDataRequest
	50, // 54: BinanceUser.HandleP:input_type -> HandlePRequest
	52, // 55: BinanceUser.GetUserAndTrader:input_type -> GetUserAndTraderRequest
	54, // 56: BinanceUser.GetTraderPosition:input_type -> GetTraderPositionRequest
	56, // 57: BinanceUser.GetUserPosition:input_type -> GetUserPositionRequest
	58, // 58: BinanceUser.OpenPosition:input_type -> OpenPositionRequest
	60, // 59: BinanceUser.InitPosition:input_type -> InitPositionRequest
	62, // 60: BinanceUser.UnbindAndClosePosition:input_type -> UnbindAndClosePositionRequest
	1,  // 61: BinanceUser.GetUser:output_type -> GetUserReply
	3,  // 62: BinanceUser.PullUserDeposit:output_type -> PullUserDepositReply
	3,  // 63: BinanceUser.PullUserDeposit2:output_type -> PullUserDepositReply
	5,  // 64: BinanceUser.PullUserCredentialsBsc:output_type -> PullUserCredentialsBscReply
	7,  // 65: BinanceUser.BindTrader:output_type -> BindTraderReply
	25, // 66: BinanceUser.ListenTraderAndUserOrder:output_type -> ListenTraderAndUserOrderReply
	25, // 67: BinanceUser.ListenTraderAndUserOrderNew:output_type -> ListenTraderAndUserOrderReply
	25, // 68: BinanceUser.ListenOrderNew:output_type -> ListenTraderAndUserOrderReply
	23, // 69: BinanceUser.OrderHandle:output_type -> OrderHandleReply
	23, // 70: BinanceUser.OrderHandleTwo:output_type -> OrderHandleReply
	9,  // 71: BinanceUser.Analyze:output_type -> AnalyzeReply
	11, // 72: BinanceUser.CloseOrderAfterBind:output_type -> CloseOrderAfterBindReply
	11, // 73: BinanceUser.CloseOrderAfterBindTwo:output_type -> CloseOrderAfterBindReply
	13, // 74: BinanceUser.InitOrderAfterBind:output_type -> InitOrderAfterBindReply
	13, // 75: BinanceUser.InitOrderAfterBindTwo:output_type -> InitOrderAfterBindReply
	13, // 76: BinanceUser.InitOrderAfterBindTwoNew:output_type -> InitOrderAfterBindReply
	15, // 77: BinanceUser.HandleChange:output_type -> OverOrderAfterBindReply
	15, // 78: BinanceUser.OverOrderAfterBind:output_type -> OverOrderAfterBindReply
	15, // 79: BinanceUser.OverOrderAfterBindTwo:output_type -> OverOrderAfterBindReply
	15, // 80: BinanceUser.AdminOverOrderAfterBind:output_type -> OverOrderAfterBindReply
	15, // 81: BinanceUser.AdminOverOrderAfterBindTwo:output_type -> OverOrderAfterBindReply
	17, // 82: BinanceUser.AdminOverOrderTwoByInfo:output_type -> AdminOverOrderTwoByInfoReply
	19, // 83: BinanceUser.OrderAdminTwo:output_type -> OrderAdminTwoReply
	21, // 84: BinanceUser.ExchangeUserLeverAge:output_type -> ExchangeUserLeverAgeReply
	27, // 85: BinanceUser.PullTradingBoxOpen:output_type -> PullTradingBoxOpenReply
	29, // 86: BinanceUser.SettleTradingBoxOpen:output_type -> SettleTradingBoxOpenReply
	31, // 87: BinanceUser.PullBinanceTradeHistory:output_type -> PullBinanceTradeHistoryReply
	33, // 88: BinanceUser.GetBinanceTraderPosition:output_type -> GetBinanceTraderPositionHistoryReply
	34, // 89: BinanceUser.UserOrderDo:output_type -> UserOrderDoReply
	34, // 90: BinanceUser.UserOrderDoTwo:output_type -> UserOrderDoReply
	36, // 91: BinanceUser.UserOrderDoHandlePrice:output_type -> UserOrderDoHandlePriceReply
	38, // 92: BinanceUser.PullFilData:output_type -> PullFilDataReply
	40, // 93: BinanceUser.GetFilData:output_type -> GetFilDataReply
	44, // 94: BinanceUser.GetUserBindData:output_type -> GetUserBindDataReply
	42, // 95: BinanceUser.GetBinanceTradersTrade:output_type -> GetBinanceTradersTradeReply
	47, // 96: BinanceUser.InsertUserBindData:output_type -> InsertUserBindDataReply
	49, // 97: BinanceUser.DeleteUserBindData:output_type -> DeleteUserBindDataReply
	51, // 98: BinanceUser.HandleP:output_type -> HandlePReply
	53, // 99: BinanceUser.GetUserAndTrader:output_type -> GetUserAndTraderReply
	55, // 100: BinanceUser.GetTraderPosition:output_type -> GetTraderPositionReply
	57, // 101: BinanceUser.GetUserPosition:output_type -> GetUserPositionReply
	59, // 102: BinanceUser.OpenPosition:output_type -> OpenPositionReply
	61, // 103: BinanceUser.InitPosition:output_type -> InitPositionReply
	63, // 104: BinanceUser.UnbindAndClosePosition:output_type -> UnbindAndClosePositionReply
	61, // [61:105] is the sub-list for method output_type
	17, // [17:61] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_api_binanceexchange_user_v1_binanceexchange_user_proto_init() }
func file_api_binanceexchange_user_v1_binanceexchange_user_proto_init() {
	if File_api_binanceexchange_user_v1_binanceexchange_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullUserDepositRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullUserDepositReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullUserCredentialsBscRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullUserCredentialsBscReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindTraderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindTraderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseOrderAfterBindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseOrderAfterBindReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitOrderAfterBindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitOrderAfterBindReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverOrderAfterBindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverOrderAfterBindReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminOverOrderTwoByInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminOverOrderTwoByInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAdminTwoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAdminTwoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeUserLeverAgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeUserLeverAgeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHandleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderHandleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenTraderAndUserOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenTraderAndUserOrderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullTradingBoxOpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullTradingBoxOpenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleTradingBoxOpenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettleTradingBoxOpenReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullBinanceTradeHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullBinanceTradeHistoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBinanceTraderPositionHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBinanceTraderPositionHistoryReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOrderDoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOrderDoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOrderDoHandlePriceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOrderDoHandlePriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullFilDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PullFilDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBinanceTradersTradeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBinanceTradersTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBindDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBindDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertUserBindDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertUserBindDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserBindDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserBindDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlePRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandlePReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAndTraderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAndTraderReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraderPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraderPositionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPositionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPositionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPositionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbindAndClosePositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbindAndClosePositionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenTraderAndUserOrderRequest_SendBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenTraderAndUserOrderRequest_SendBody_Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenTraderAndUserOrderRequest_SendBody_Order_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBinanceTraderPositionHistoryReply_Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFilDataReply_DataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBinanceTradersTradeReply_DataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBindDataReply_DataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertUserBindDataRequest_SendBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserBindDataRequest_SendBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAndTraderReply_DataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAndTraderReply_DataBindTraderList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTraderPositionReply_DataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserPositionReply_DataList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenPositionRequest_SendBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitPositionRequest_SendBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbindAndClosePositionRequest_SendBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   80,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_binanceexchange_user_v1_binanceexchange_user_proto_goTypes,
		DependencyIndexes: file_api_binanceexchange_user_v1_binanceexchange_user_proto_depIdxs,
		MessageInfos:      file_api_binanceexchange_user_v1_binanceexchange_user_proto_msgTypes,
	}.Build()
	File_api_binanceexchange_user_v1_binanceexchange_user_proto = out.File
	file_api_binanceexchange_user_v1_binanceexchange_user_proto_rawDesc = nil
	file_api_binanceexchange_user_v1_binanceexchange_user_proto_goTypes = nil
	file_api_binanceexchange_user_v1_binanceexchange_user_proto_depIdxs = nil
}
